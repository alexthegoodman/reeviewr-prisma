### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Annotation {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [AnnotationMeta!]
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: Post!
  user: User!
}

input AnnotationCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: AnnotationMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input AnnotationCreateManyWithoutAnnotationsInput {
  connect: [AnnotationWhereUniqueInput!]
  create: [AnnotationCreateWithoutPostInput!]
}

input AnnotationCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: AnnotationMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

type AnnotationMeta {
  annotation: Annotation!
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
}

input AnnotationMetaCreateManyWithoutItemMetaInput {
  connect: [AnnotationMetaWhereUniqueInput!]
  create: [AnnotationMetaCreateWithoutAnnotationInput!]
}

input AnnotationMetaCreateWithoutAnnotationInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input AnnotationMetaWhereUniqueInput {
  id: ID
}

input AnnotationWhereUniqueInput {
  id: ID
}

type Category {
  id: ID!
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  pods(after: String, before: String, first: Int, last: Int, skip: Int): [Pod!]
}

input CategoryCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  pods: PodCreateManyWithoutPodsInput
  updatedAt: DateTime
}

input CategoryCreateManyWithoutCategoriesInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPodsInput!]
}

input CategoryCreateWithoutPodsInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
}

"""DateTime"""
scalar DateTime

type Favorite {
  id: ID!
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: Post!
  user: User!
}

input FavoriteCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input FavoriteCreateManyWithoutFavoritesInput {
  connect: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateWithoutUserInput!]
}

input FavoriteCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
}

input FavoriteWhereUniqueInput {
  id: ID
}

type Message {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [MessageMeta!]
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: Thread!
  user: User!
}

input MessageCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: MessageMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: ThreadCreateOneWithoutThreadInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input MessageCreateOneWithoutMessageInput {
  connect: MessageWhereUniqueInput
  create: MessageCreateWithoutThreadInput
}

input MessageCreateWithoutThreadInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: MessageMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

type MessageMeta {
  id: ID!
  message: Message!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
}

input MessageMetaCreateManyWithoutItemMetaInput {
  connect: [MessageMetaWhereUniqueInput!]
  create: [MessageMetaCreateWithoutMessageInput!]
}

input MessageMetaCreateWithoutMessageInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input MessageMetaWhereUniqueInput {
  id: ID
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createOneAnnotation(data: AnnotationCreateInput!): Annotation!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneFavorite(data: FavoriteCreateInput!): Favorite!
  createOneMessage(data: MessageCreateInput!): Message!
  createOneNotification(data: NotificationCreateInput!): Notification!
  createOnePod(data: PodCreateInput!): Pod!
  createOnePost(data: PostCreateInput!): Post!
  createOneQuestion(data: QuestionCreateInput!): Question!
  createOneReview(data: ReviewCreateInput!): Review!
  createOneTag(data: TagCreateInput!): Tag!
  createOneThread(data: ThreadCreateInput!): Thread!
  createOneUser(data: UserCreateInput!): User!
}

type Notification {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [NotificationMeta!]
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: Thread!
  user: User!
}

input NotificationCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: ThreadCreateOneWithoutThreadInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input NotificationCreateManyWithoutNotificationsInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutUserInput!]
}

input NotificationCreateOneWithoutNotificationInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutThreadInput
}

input NotificationCreateWithoutThreadInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input NotificationCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: ThreadCreateOneWithoutThreadInput!
  updatedAt: DateTime
}

type NotificationMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  notification: Notification!
}

input NotificationMetaCreateManyWithoutItemMetaInput {
  connect: [NotificationMetaWhereUniqueInput!]
  create: [NotificationMetaCreateWithoutNotificationInput!]
}

input NotificationMetaCreateWithoutNotificationInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input NotificationMetaWhereUniqueInput {
  id: ID
}

input NotificationWhereUniqueInput {
  id: ID
}

type Pod {
  categories(after: String, before: String, first: Int, last: Int, skip: Int): [Category!]
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [PostMeta!]
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
  user: User!
}

input PodCreateInput {
  categories: CategoryCreateManyWithoutCategoriesInput
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  podMeta: PodMetaCreateOneWithoutPodMetaInput
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PodCreateManyWithoutPodsInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutCategoriesInput!]
}

input PodCreateOneWithoutPodInput {
  connect: PodWhereUniqueInput
  create: PodCreateWithoutPostsInput
}

input PodCreateWithoutCategoriesInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  podMeta: PodMetaCreateOneWithoutPodMetaInput
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PodCreateWithoutPostsInput {
  categories: CategoryCreateManyWithoutCategoriesInput
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  podMeta: PodMetaCreateOneWithoutPodMetaInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

type PodMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  pod: Pod!
}

input PodMetaCreateOneWithoutPodMetaInput {
  connect: PodMetaWhereUniqueInput
  create: PodMetaCreateWithoutPodInput
}

input PodMetaCreateWithoutPodInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input PodMetaWhereUniqueInput {
  id: ID
}

input PodWhereUniqueInput {
  id: ID
}

type Post {
  annotations(after: String, before: String, first: Int, last: Int, skip: Int): [Annotation!]
  favorites(after: String, before: String, first: Int, last: Int, skip: Int): [Favorite!]
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [PostMeta!]
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  pod: Pod!
  questions(after: String, before: String, first: Int, last: Int, skip: Int): [Question!]
  reviews(after: String, before: String, first: Int, last: Int, skip: Int): [Review!]
  tags(after: String, before: String, first: Int, last: Int, skip: Int): [Tag!]
  user: User!
}

input PostCreateInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutUserInput!]
}

input PostCreateOneWithoutPostInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutFavoritesInput
}

input PostCreateWithoutFavoritesInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateWithoutUserInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
}

type PostMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  post: Post!
}

input PostMetaCreateManyWithoutItemMetaInput {
  connect: [PostMetaWhereUniqueInput!]
  create: [PostMetaCreateWithoutPostInput!]
}

input PostMetaCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  pod: PodCreateOneWithoutPodInput
  updatedAt: DateTime
}

input PostMetaWhereUniqueInput {
  id: ID
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  findManyAnnotation(after: String, before: String, first: Int, last: Int, skip: Int): [Annotation!]
  findManyCategory(after: String, before: String, first: Int, last: Int, skip: Int): [Category!]
  findManyFavorite(after: String, before: String, first: Int, last: Int, skip: Int): [Favorite!]
  findManyMessage(after: String, before: String, first: Int, last: Int, skip: Int): [Message!]
  findManyNotification(after: String, before: String, first: Int, last: Int, skip: Int): [Notification!]
  findManyPod(after: String, before: String, first: Int, last: Int, skip: Int): [Pod!]
  findManyPost(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
  findManyQuestion(after: String, before: String, first: Int, last: Int, skip: Int): [Question!]
  findManyReview(after: String, before: String, first: Int, last: Int, skip: Int): [Review!]
  findManyTag(after: String, before: String, first: Int, last: Int, skip: Int): [Tag!]
  findManyThread(after: String, before: String, first: Int, last: Int, skip: Int): [Thread!]
  findManyUser(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  findOneAnnotation(where: AnnotationWhereUniqueInput!): Annotation
  findOneCategory(where: CategoryWhereUniqueInput!): Category
  findOneFavorite(where: FavoriteWhereUniqueInput!): Favorite
  findOneMessage(where: MessageWhereUniqueInput!): Message
  findOneNotification(where: NotificationWhereUniqueInput!): Notification
  findOnePod(where: PodWhereUniqueInput!): Pod
  findOnePost(where: PostWhereUniqueInput!): Post
  findOneQuestion(where: QuestionWhereUniqueInput!): Question
  findOneReview(where: ReviewWhereUniqueInput!): Review
  findOneTag(where: TagWhereUniqueInput!): Tag
  findOneThread(where: ThreadWhereUniqueInput!): Thread
  findOneUser(where: UserWhereUniqueInput!): User
}

type Question {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [QuestionMeta!]
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: Post!
  user: User!
}

input QuestionCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: QuestionMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input QuestionCreateManyWithoutQuestionsInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutPostInput!]
}

input QuestionCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: QuestionMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

type QuestionMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  question: Question!
}

input QuestionMetaCreateManyWithoutItemMetaInput {
  connect: [QuestionMetaWhereUniqueInput!]
  create: [QuestionMetaCreateWithoutQuestionInput!]
}

input QuestionMetaCreateWithoutQuestionInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input QuestionMetaWhereUniqueInput {
  id: ID
}

input QuestionWhereUniqueInput {
  id: ID
}

type Review {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [ReviewMeta!]
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: Post!
  user: User!
}

input ReviewCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ReviewMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input ReviewCreateManyWithoutReviewsInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutPostInput!]
}

input ReviewCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ReviewMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

type ReviewMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  review: Review!
}

input ReviewMetaCreateManyWithoutItemMetaInput {
  connect: [ReviewMetaWhereUniqueInput!]
  create: [ReviewMetaCreateWithoutReviewInput!]
}

input ReviewMetaCreateWithoutReviewInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input ReviewMetaWhereUniqueInput {
  id: ID
}

input ReviewWhereUniqueInput {
  id: ID
}

type Tag {
  id: ID!
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
}

input TagCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
}

input TagCreateManyWithoutTagsInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostsInput!]
}

input TagCreateWithoutPostsInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
}

type Thread {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [ThreadMeta!]
  itemName: String!
  itemStatus: String!
  itemType: String!
  user: User!
}

input ThreadCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ThreadMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  message: MessageCreateOneWithoutMessageInput
  notification: NotificationCreateOneWithoutNotificationInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input ThreadCreateManyWithoutThreadsInput {
  connect: [ThreadWhereUniqueInput!]
  create: [ThreadCreateWithoutUserInput!]
}

input ThreadCreateOneWithoutThreadInput {
  connect: ThreadWhereUniqueInput
  create: ThreadCreateWithoutNotificationInput
}

input ThreadCreateWithoutNotificationInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ThreadMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  message: MessageCreateOneWithoutMessageInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input ThreadCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ThreadMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  message: MessageCreateOneWithoutMessageInput
  notification: NotificationCreateOneWithoutNotificationInput
  updatedAt: DateTime
}

type ThreadMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  thread: Thread!
}

input ThreadMetaCreateManyWithoutItemMetaInput {
  connect: [ThreadMetaWhereUniqueInput!]
  create: [ThreadMetaCreateWithoutThreadInput!]
}

input ThreadMetaCreateWithoutThreadInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input ThreadMetaWhereUniqueInput {
  id: ID
}

input ThreadWhereUniqueInput {
  id: ID
}

type User {
  annotations(after: String, before: String, first: Int, last: Int, skip: Int): [Annotation!]
  confirmHash: String!
  favorites(after: String, before: String, first: Int, last: Int, skip: Int): [Favorite!]
  followers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  following(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  forgotHash: String!
  id: ID!
  notifications(after: String, before: String, first: Int, last: Int, skip: Int): [Notification!]
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
  privateHash: String!
  publicHash: String!
  questions(after: String, before: String, first: Int, last: Int, skip: Int): [Question!]
  reviews(after: String, before: String, first: Int, last: Int, skip: Int): [Review!]
  threads(after: String, before: String, first: Int, last: Int, skip: Int): [Thread!]
  userConfirmed: Int!
  userDeleted: Boolean!
  userEmail: String!
  userMeta(after: String, before: String, first: Int, last: Int, skip: Int): [UserMeta!]
  userType: Int!
}

input UserCreateInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pod: PodCreateOneWithoutPodInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPodInput
}

input UserCreateWithoutFollowersInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pod: PodCreateOneWithoutPodInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutFollowingInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: ID
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pod: PodCreateOneWithoutPodInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutPodInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

type UserMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  user: User!
}

input UserMetaCreateManyWithoutUserMetaInput {
  connect: [UserMetaWhereUniqueInput!]
  create: [UserMetaCreateWithoutUserInput!]
}

input UserMetaCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input UserMetaWhereUniqueInput {
  id: ID
}

input UserWhereUniqueInput {
  confirmHash: String
  forgotHash: String
  id: ID
  privateHash: String
  publicHash: String
  userEmail: String
}

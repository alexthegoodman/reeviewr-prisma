### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Annotation {
  createdAt: DateTime!
  id: String!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: AnnotationMetaWhereUniqueInput, before: AnnotationMetaWhereUniqueInput, first: Int, last: Int, skip: Int): [AnnotationMeta!]!
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: Post!
  updatedAt: DateTime!
  user: User!
}

input AnnotationCreateInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: AnnotationMetaCreateManyWithoutAnnotationInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutAnnotationsInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutAnnotationsInput!
}

input AnnotationCreateManyWithoutPostInput {
  connect: [AnnotationWhereUniqueInput!]
  create: [AnnotationCreateWithoutPostInput!]
}

input AnnotationCreateManyWithoutUserInput {
  connect: [AnnotationWhereUniqueInput!]
  create: [AnnotationCreateWithoutUserInput!]
}

input AnnotationCreateWithoutPostInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: AnnotationMetaCreateManyWithoutAnnotationInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutAnnotationsInput!
}

input AnnotationCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: AnnotationMetaCreateManyWithoutAnnotationInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutAnnotationsInput!
  updatedAt: DateTime
}

input AnnotationFilter {
  every: AnnotationWhereInput
  none: AnnotationWhereInput
  some: AnnotationWhereInput
}

type AnnotationMeta {
  annotation: Annotation!
  id: String!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
}

input AnnotationMetaCreateManyWithoutAnnotationInput {
  connect: [AnnotationMetaWhereUniqueInput!]
  create: [AnnotationMetaCreateWithoutAnnotationInput!]
}

input AnnotationMetaCreateWithoutAnnotationInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input AnnotationMetaFilter {
  every: AnnotationMetaWhereInput
  none: AnnotationMetaWhereInput
  some: AnnotationMetaWhereInput
}

input AnnotationMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input AnnotationMetaScalarWhereInput {
  AND: [AnnotationMetaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [AnnotationMetaScalarWhereInput!]
  OR: [AnnotationMetaScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input AnnotationMetaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input AnnotationMetaUpdateManyWithoutAnnotationInput {
  connect: [AnnotationMetaWhereUniqueInput!]
  create: [AnnotationMetaCreateWithoutAnnotationInput!]
  delete: [AnnotationMetaWhereUniqueInput!]
  deleteMany: [AnnotationMetaScalarWhereInput!]
  disconnect: [AnnotationMetaWhereUniqueInput!]
  set: [AnnotationMetaWhereUniqueInput!]
  update: [AnnotationMetaUpdateWithWhereUniqueWithoutAnnotationInput!]
  updateMany: [AnnotationMetaUpdateManyWithWhereNestedInput!]
  upsert: [AnnotationMetaUpsertWithWhereUniqueWithoutAnnotationInput!]
}

input AnnotationMetaUpdateManyWithWhereNestedInput {
  data: AnnotationMetaUpdateManyDataInput!
  where: AnnotationMetaScalarWhereInput!
}

input AnnotationMetaUpdateWithoutAnnotationDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input AnnotationMetaUpdateWithWhereUniqueWithoutAnnotationInput {
  data: AnnotationMetaUpdateWithoutAnnotationDataInput!
  where: AnnotationMetaWhereUniqueInput!
}

input AnnotationMetaUpsertWithWhereUniqueWithoutAnnotationInput {
  create: AnnotationMetaCreateWithoutAnnotationInput!
  update: AnnotationMetaUpdateWithoutAnnotationDataInput!
  where: AnnotationMetaWhereUniqueInput!
}

input AnnotationMetaWhereInput {
  AND: [AnnotationMetaWhereInput!]
  annotation: AnnotationWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [AnnotationMetaWhereInput!]
  OR: [AnnotationMetaWhereInput!]
  updatedAt: DateTimeFilter
}

input AnnotationMetaWhereUniqueInput {
  id: String
}

input AnnotationOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemMimeType: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input AnnotationScalarWhereInput {
  AND: [AnnotationScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: AnnotationMetaFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [AnnotationScalarWhereInput!]
  OR: [AnnotationScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input AnnotationUpdateInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: AnnotationMetaUpdateManyWithoutAnnotationInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutAnnotationsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutAnnotationsInput
}

input AnnotationUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input AnnotationUpdateManyWithoutPostInput {
  connect: [AnnotationWhereUniqueInput!]
  create: [AnnotationCreateWithoutPostInput!]
  delete: [AnnotationWhereUniqueInput!]
  deleteMany: [AnnotationScalarWhereInput!]
  disconnect: [AnnotationWhereUniqueInput!]
  set: [AnnotationWhereUniqueInput!]
  update: [AnnotationUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [AnnotationUpdateManyWithWhereNestedInput!]
  upsert: [AnnotationUpsertWithWhereUniqueWithoutPostInput!]
}

input AnnotationUpdateManyWithoutUserInput {
  connect: [AnnotationWhereUniqueInput!]
  create: [AnnotationCreateWithoutUserInput!]
  delete: [AnnotationWhereUniqueInput!]
  deleteMany: [AnnotationScalarWhereInput!]
  disconnect: [AnnotationWhereUniqueInput!]
  set: [AnnotationWhereUniqueInput!]
  update: [AnnotationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AnnotationUpdateManyWithWhereNestedInput!]
  upsert: [AnnotationUpsertWithWhereUniqueWithoutUserInput!]
}

input AnnotationUpdateManyWithWhereNestedInput {
  data: AnnotationUpdateManyDataInput!
  where: AnnotationScalarWhereInput!
}

input AnnotationUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: AnnotationMetaUpdateManyWithoutAnnotationInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutAnnotationsInput
}

input AnnotationUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: AnnotationMetaUpdateManyWithoutAnnotationInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutAnnotationsInput
  updatedAt: DateTime
}

input AnnotationUpdateWithWhereUniqueWithoutPostInput {
  data: AnnotationUpdateWithoutPostDataInput!
  where: AnnotationWhereUniqueInput!
}

input AnnotationUpdateWithWhereUniqueWithoutUserInput {
  data: AnnotationUpdateWithoutUserDataInput!
  where: AnnotationWhereUniqueInput!
}

input AnnotationUpsertWithWhereUniqueWithoutPostInput {
  create: AnnotationCreateWithoutPostInput!
  update: AnnotationUpdateWithoutPostDataInput!
  where: AnnotationWhereUniqueInput!
}

input AnnotationUpsertWithWhereUniqueWithoutUserInput {
  create: AnnotationCreateWithoutUserInput!
  update: AnnotationUpdateWithoutUserDataInput!
  where: AnnotationWhereUniqueInput!
}

input AnnotationWhereInput {
  AND: [AnnotationWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: AnnotationMetaFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [AnnotationWhereInput!]
  OR: [AnnotationWhereInput!]
  post: PostWhereInput
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input AnnotationWhereUniqueInput {
  id: String
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Category {
  createdAt: DateTime!
  id: String!
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  pods(after: PodWhereUniqueInput, before: PodWhereUniqueInput, first: Int, last: Int, skip: Int): [Pod!]!
  updatedAt: DateTime!
}

input CategoryCreateInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  pods: PodCreateManyWithoutCategoriesInput
  updatedAt: DateTime
}

input CategoryCreateManyWithoutPodsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPodsInput!]
}

input CategoryCreateWithoutPodsInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
}

input CategoryFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  pods: PodFilter
  updatedAt: DateTimeFilter
}

input CategoryUpdateInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  pods: PodUpdateManyWithoutCategoriesInput
  updatedAt: DateTime
}

input CategoryUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input CategoryUpdateManyWithoutPodsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPodsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutPodsInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutPodsInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  data: CategoryUpdateManyDataInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateWithoutPodsDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input CategoryUpdateWithWhereUniqueWithoutPodsInput {
  data: CategoryUpdateWithoutPodsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutPodsInput {
  create: CategoryCreateWithoutPodsInput!
  update: CategoryUpdateWithoutPodsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  pods: PodFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Favorite {
  createdAt: DateTime!
  id: String!
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: Post!
  updatedAt: DateTime!
  user: User!
}

input FavoriteCreateInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: PostCreateOneWithoutFavoritesInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutFavoritesInput!
}

input FavoriteCreateManyWithoutPostInput {
  connect: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateWithoutPostInput!]
}

input FavoriteCreateManyWithoutUserInput {
  connect: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateWithoutUserInput!]
}

input FavoriteCreateWithoutPostInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutFavoritesInput!
}

input FavoriteCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: PostCreateOneWithoutFavoritesInput!
  updatedAt: DateTime
}

input FavoriteFilter {
  every: FavoriteWhereInput
  none: FavoriteWhereInput
  some: FavoriteWhereInput
}

input FavoriteOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input FavoriteScalarWhereInput {
  AND: [FavoriteScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [FavoriteScalarWhereInput!]
  OR: [FavoriteScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input FavoriteUpdateInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  post: PostUpdateOneRequiredWithoutFavoritesInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutFavoritesInput
}

input FavoriteUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input FavoriteUpdateManyWithoutPostInput {
  connect: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateWithoutPostInput!]
  delete: [FavoriteWhereUniqueInput!]
  deleteMany: [FavoriteScalarWhereInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [FavoriteUpdateManyWithWhereNestedInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutPostInput!]
}

input FavoriteUpdateManyWithoutUserInput {
  connect: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateWithoutUserInput!]
  delete: [FavoriteWhereUniqueInput!]
  deleteMany: [FavoriteScalarWhereInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [FavoriteUpdateManyWithWhereNestedInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutUserInput!]
}

input FavoriteUpdateManyWithWhereNestedInput {
  data: FavoriteUpdateManyDataInput!
  where: FavoriteScalarWhereInput!
}

input FavoriteUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutFavoritesInput
}

input FavoriteUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  post: PostUpdateOneRequiredWithoutFavoritesInput
  updatedAt: DateTime
}

input FavoriteUpdateWithWhereUniqueWithoutPostInput {
  data: FavoriteUpdateWithoutPostDataInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUpdateWithWhereUniqueWithoutUserInput {
  data: FavoriteUpdateWithoutUserDataInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUpsertWithWhereUniqueWithoutPostInput {
  create: FavoriteCreateWithoutPostInput!
  update: FavoriteUpdateWithoutPostDataInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUpsertWithWhereUniqueWithoutUserInput {
  create: FavoriteCreateWithoutUserInput!
  update: FavoriteUpdateWithoutUserDataInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteWhereInput {
  AND: [FavoriteWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  post: PostWhereInput
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input FavoriteWhereUniqueInput {
  id: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Message {
  createdAt: DateTime!
  id: String!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: MessageMetaWhereUniqueInput, before: MessageMetaWhereUniqueInput, first: Int, last: Int, skip: Int): [MessageMeta!]!
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: Thread!
  updatedAt: DateTime!
  user: User!
}

input MessageCreateInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: MessageMetaCreateManyWithoutMessageInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: ThreadCreateOneWithoutMessagesInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutThreadInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutThreadInput!]
}

input MessageCreateManyWithoutUserInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutUserInput!]
}

input MessageCreateWithoutThreadInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: MessageMetaCreateManyWithoutMessageInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutMessagesInput!
}

input MessageCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: MessageMetaCreateManyWithoutMessageInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: ThreadCreateOneWithoutMessagesInput!
  updatedAt: DateTime
}

input MessageFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

type MessageMeta {
  id: String!
  message: Message!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
}

input MessageMetaCreateManyWithoutMessageInput {
  connect: [MessageMetaWhereUniqueInput!]
  create: [MessageMetaCreateWithoutMessageInput!]
}

input MessageMetaCreateWithoutMessageInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input MessageMetaFilter {
  every: MessageMetaWhereInput
  none: MessageMetaWhereInput
  some: MessageMetaWhereInput
}

input MessageMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input MessageMetaScalarWhereInput {
  AND: [MessageMetaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MessageMetaScalarWhereInput!]
  OR: [MessageMetaScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input MessageMetaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input MessageMetaUpdateManyWithoutMessageInput {
  connect: [MessageMetaWhereUniqueInput!]
  create: [MessageMetaCreateWithoutMessageInput!]
  delete: [MessageMetaWhereUniqueInput!]
  deleteMany: [MessageMetaScalarWhereInput!]
  disconnect: [MessageMetaWhereUniqueInput!]
  set: [MessageMetaWhereUniqueInput!]
  update: [MessageMetaUpdateWithWhereUniqueWithoutMessageInput!]
  updateMany: [MessageMetaUpdateManyWithWhereNestedInput!]
  upsert: [MessageMetaUpsertWithWhereUniqueWithoutMessageInput!]
}

input MessageMetaUpdateManyWithWhereNestedInput {
  data: MessageMetaUpdateManyDataInput!
  where: MessageMetaScalarWhereInput!
}

input MessageMetaUpdateWithoutMessageDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input MessageMetaUpdateWithWhereUniqueWithoutMessageInput {
  data: MessageMetaUpdateWithoutMessageDataInput!
  where: MessageMetaWhereUniqueInput!
}

input MessageMetaUpsertWithWhereUniqueWithoutMessageInput {
  create: MessageMetaCreateWithoutMessageInput!
  update: MessageMetaUpdateWithoutMessageDataInput!
  where: MessageMetaWhereUniqueInput!
}

input MessageMetaWhereInput {
  AND: [MessageMetaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  message: MessageWhereInput
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MessageMetaWhereInput!]
  OR: [MessageMetaWhereInput!]
  updatedAt: DateTimeFilter
}

input MessageMetaWhereUniqueInput {
  id: String
}

input MessageOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: MessageMetaFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input MessageUpdateInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: MessageMetaUpdateManyWithoutMessageInput
  itemName: String
  itemStatus: String
  itemType: String
  thread: ThreadUpdateOneRequiredWithoutMessagesInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input MessageUpdateManyWithoutThreadInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutThreadInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutThreadInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutThreadInput!]
}

input MessageUpdateManyWithoutUserInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutUserInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutUserInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  data: MessageUpdateManyDataInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateWithoutThreadDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: MessageMetaUpdateManyWithoutMessageInput
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: MessageMetaUpdateManyWithoutMessageInput
  itemName: String
  itemStatus: String
  itemType: String
  thread: ThreadUpdateOneRequiredWithoutMessagesInput
  updatedAt: DateTime
}

input MessageUpdateWithWhereUniqueWithoutThreadInput {
  data: MessageUpdateWithoutThreadDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutUserInput {
  data: MessageUpdateWithoutUserDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutThreadInput {
  create: MessageCreateWithoutThreadInput!
  update: MessageUpdateWithoutThreadDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutUserInput {
  create: MessageCreateWithoutUserInput!
  update: MessageUpdateWithoutUserDataInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: MessageMetaFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  thread: ThreadWhereInput
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input MessageWhereUniqueInput {
  id: String
}

type Mutation {
  createOneAnnotation(data: AnnotationCreateInput!): Annotation!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneFavorite(data: FavoriteCreateInput!): Favorite!
  createOneMessage(data: MessageCreateInput!): Message!
  createOneNotification(data: NotificationCreateInput!): Notification!
  createOnePod(data: PodCreateInput!): Pod!
  createOnePost(data: PostCreateInput!): Post!
  createOneQuestion(data: QuestionCreateInput!): Question!
  createOneReview(data: ReviewCreateInput!): Review!
  createOneTag(data: TagCreateInput!): Tag!
  createOneThread(data: ThreadCreateInput!): Thread!
  createOneUser(data: UserCreateInput!): User!
  deleteOneAnnotation(id: ID): Boolean
  deleteOneMessage(id: ID): Boolean
  deleteOnePod(id: ID): Boolean
  deleteOnePost(id: ID): Boolean
  deleteOneQuestion(id: ID): Boolean
  deleteOneReview(id: ID): Boolean
  deleteOneThread(id: ID): Boolean
  deleteOneUser(id: ID): Boolean
  updateOneAnnotation(data: AnnotationUpdateInput!, where: AnnotationWhereUniqueInput!): Annotation
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneFavorite(data: FavoriteUpdateInput!, where: FavoriteWhereUniqueInput!): Favorite
  updateOneMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateOneNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateOnePod(data: PodUpdateInput!, where: PodWhereUniqueInput!): Pod
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateOneReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneThread(data: ThreadUpdateInput!, where: ThreadWhereUniqueInput!): Thread
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

type Notification {
  createdAt: DateTime!
  id: String!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: NotificationMetaWhereUniqueInput, before: NotificationMetaWhereUniqueInput, first: Int, last: Int, skip: Int): [NotificationMeta!]!
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: Pod
  post: Post
  receiver: User!
  sender: User!
  updatedAt: DateTime!
}

input NotificationCreateInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutNotificationInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutNotificationsInput
  post: PostCreateOneWithoutNotificationsInput
  receiver: UserCreateOneWithoutRecievedNotificationsInput!
  sender: UserCreateOneWithoutSentNotificationsInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutNotificationsInput
}

input NotificationCreateManyWithoutPodInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutPodInput!]
}

input NotificationCreateManyWithoutPostInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutPostInput!]
}

input NotificationCreateManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutUserInput!]
}

input NotificationCreateOneWithoutReceiverInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutReceiverInput
}

input NotificationCreateOneWithoutSenderInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutSenderInput
}

input NotificationCreateWithoutPodInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutNotificationInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: PostCreateOneWithoutNotificationsInput
  receiver: UserCreateOneWithoutRecievedNotificationsInput!
  sender: UserCreateOneWithoutSentNotificationsInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutNotificationsInput
}

input NotificationCreateWithoutPostInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutNotificationInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutNotificationsInput
  receiver: UserCreateOneWithoutRecievedNotificationsInput!
  sender: UserCreateOneWithoutSentNotificationsInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutNotificationsInput
}

input NotificationCreateWithoutReceiverInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutNotificationInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutNotificationsInput
  post: PostCreateOneWithoutNotificationsInput
  sender: UserCreateOneWithoutSentNotificationsInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutNotificationsInput
}

input NotificationCreateWithoutSenderInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutNotificationInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutNotificationsInput
  post: PostCreateOneWithoutNotificationsInput
  receiver: UserCreateOneWithoutRecievedNotificationsInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutNotificationsInput
}

input NotificationCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutNotificationInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutNotificationsInput
  post: PostCreateOneWithoutNotificationsInput
  receiver: UserCreateOneWithoutRecievedNotificationsInput!
  sender: UserCreateOneWithoutSentNotificationsInput!
  updatedAt: DateTime
}

input NotificationFilter {
  every: NotificationWhereInput
  none: NotificationWhereInput
  some: NotificationWhereInput
}

type NotificationMeta {
  id: String!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  notification: Notification!
}

input NotificationMetaCreateManyWithoutNotificationInput {
  connect: [NotificationMetaWhereUniqueInput!]
  create: [NotificationMetaCreateWithoutNotificationInput!]
}

input NotificationMetaCreateWithoutNotificationInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input NotificationMetaFilter {
  every: NotificationMetaWhereInput
  none: NotificationMetaWhereInput
  some: NotificationMetaWhereInput
}

input NotificationMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input NotificationMetaScalarWhereInput {
  AND: [NotificationMetaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [NotificationMetaScalarWhereInput!]
  OR: [NotificationMetaScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input NotificationMetaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input NotificationMetaUpdateManyWithoutNotificationInput {
  connect: [NotificationMetaWhereUniqueInput!]
  create: [NotificationMetaCreateWithoutNotificationInput!]
  delete: [NotificationMetaWhereUniqueInput!]
  deleteMany: [NotificationMetaScalarWhereInput!]
  disconnect: [NotificationMetaWhereUniqueInput!]
  set: [NotificationMetaWhereUniqueInput!]
  update: [NotificationMetaUpdateWithWhereUniqueWithoutNotificationInput!]
  updateMany: [NotificationMetaUpdateManyWithWhereNestedInput!]
  upsert: [NotificationMetaUpsertWithWhereUniqueWithoutNotificationInput!]
}

input NotificationMetaUpdateManyWithWhereNestedInput {
  data: NotificationMetaUpdateManyDataInput!
  where: NotificationMetaScalarWhereInput!
}

input NotificationMetaUpdateWithoutNotificationDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input NotificationMetaUpdateWithWhereUniqueWithoutNotificationInput {
  data: NotificationMetaUpdateWithoutNotificationDataInput!
  where: NotificationMetaWhereUniqueInput!
}

input NotificationMetaUpsertWithWhereUniqueWithoutNotificationInput {
  create: NotificationMetaCreateWithoutNotificationInput!
  update: NotificationMetaUpdateWithoutNotificationDataInput!
  where: NotificationMetaWhereUniqueInput!
}

input NotificationMetaWhereInput {
  AND: [NotificationMetaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [NotificationMetaWhereInput!]
  notification: NotificationWhereInput
  OR: [NotificationMetaWhereInput!]
  updatedAt: DateTimeFilter
}

input NotificationMetaWhereUniqueInput {
  id: String
}

input NotificationOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: NotificationMetaFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input NotificationUpdateInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationsInput
  post: PostUpdateOneWithoutNotificationsInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input NotificationUpdateManyWithoutPodInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutPodInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutPodInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutPodInput!]
}

input NotificationUpdateManyWithoutPostInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutPostInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutPostInput!]
}

input NotificationUpdateManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutUserInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  data: NotificationUpdateManyDataInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateOneWithoutReceiverInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutReceiverInput
  delete: Boolean
  disconnect: Boolean
  update: NotificationUpdateWithoutReceiverDataInput
  upsert: NotificationUpsertWithoutReceiverInput
}

input NotificationUpdateOneWithoutSenderInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutSenderInput
  delete: Boolean
  disconnect: Boolean
  update: NotificationUpdateWithoutSenderDataInput
  upsert: NotificationUpsertWithoutSenderInput
}

input NotificationUpdateWithoutPodDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  post: PostUpdateOneWithoutNotificationsInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationsInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateWithoutReceiverDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationsInput
  post: PostUpdateOneWithoutNotificationsInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateWithoutSenderDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationsInput
  post: PostUpdateOneWithoutNotificationsInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationsInput
  post: PostUpdateOneWithoutNotificationsInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
}

input NotificationUpdateWithWhereUniqueWithoutPodInput {
  data: NotificationUpdateWithoutPodDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithWhereUniqueWithoutPostInput {
  data: NotificationUpdateWithoutPostDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  data: NotificationUpdateWithoutUserDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithoutReceiverInput {
  create: NotificationCreateWithoutReceiverInput!
  update: NotificationUpdateWithoutReceiverDataInput!
}

input NotificationUpsertWithoutSenderInput {
  create: NotificationCreateWithoutSenderInput!
  update: NotificationUpdateWithoutSenderDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutPodInput {
  create: NotificationCreateWithoutPodInput!
  update: NotificationUpdateWithoutPodDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutPostInput {
  create: NotificationCreateWithoutPostInput!
  update: NotificationUpdateWithoutPostDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  update: NotificationUpdateWithoutUserDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: NotificationMetaFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  pod: PodWhereInput
  post: PostWhereInput
  receiver: UserWhereInput
  sender: UserWhereInput
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input NotificationWhereUniqueInput {
  id: String
}

enum OrderByArg {
  asc
  desc
}

type Pod {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, skip: Int): [Category!]!
  id: String!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: PodMetaWhereUniqueInput, before: PodMetaWhereUniqueInput, first: Int, last: Int, skip: Int): [PodMeta!]!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]!
  user: User!
}

input PodCreateInput {
  categories: CategoryCreateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutPodInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMemberOfInput
  notifications: NotificationCreateManyWithoutPodInput
  posts: PostCreateManyWithoutPodInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPodsInput!
}

input PodCreateManyWithoutCategoriesInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutCategoriesInput!]
}

input PodCreateManyWithoutMembersInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutMembersInput!]
}

input PodCreateManyWithoutUserInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutUserInput!]
}

input PodCreateOneWithoutNotificationsInput {
  connect: PodWhereUniqueInput
  create: PodCreateWithoutNotificationsInput
}

input PodCreateOneWithoutPostsInput {
  connect: PodWhereUniqueInput
  create: PodCreateWithoutPostsInput
}

input PodCreateWithoutCategoriesInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutPodInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMemberOfInput
  notifications: NotificationCreateManyWithoutPodInput
  posts: PostCreateManyWithoutPodInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPodsInput!
}

input PodCreateWithoutMembersInput {
  categories: CategoryCreateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutPodInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notifications: NotificationCreateManyWithoutPodInput
  posts: PostCreateManyWithoutPodInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPodsInput!
}

input PodCreateWithoutNotificationsInput {
  categories: CategoryCreateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutPodInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMemberOfInput
  posts: PostCreateManyWithoutPodInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPodsInput!
}

input PodCreateWithoutPostsInput {
  categories: CategoryCreateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutPodInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMemberOfInput
  notifications: NotificationCreateManyWithoutPodInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPodsInput!
}

input PodCreateWithoutUserInput {
  categories: CategoryCreateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutPodInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMemberOfInput
  notifications: NotificationCreateManyWithoutPodInput
  posts: PostCreateManyWithoutPodInput
  updatedAt: DateTime
}

input PodFilter {
  every: PodWhereInput
  none: PodWhereInput
  some: PodWhereInput
}

type PodMeta {
  id: String!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  pod: Pod!
}

input PodMetaCreateManyWithoutPodInput {
  connect: [PodMetaWhereUniqueInput!]
  create: [PodMetaCreateWithoutPodInput!]
}

input PodMetaCreateWithoutPodInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input PodMetaFilter {
  every: PodMetaWhereInput
  none: PodMetaWhereInput
  some: PodMetaWhereInput
}

input PodMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input PodMetaScalarWhereInput {
  AND: [PodMetaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [PodMetaScalarWhereInput!]
  OR: [PodMetaScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input PodMetaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input PodMetaUpdateManyWithoutPodInput {
  connect: [PodMetaWhereUniqueInput!]
  create: [PodMetaCreateWithoutPodInput!]
  delete: [PodMetaWhereUniqueInput!]
  deleteMany: [PodMetaScalarWhereInput!]
  disconnect: [PodMetaWhereUniqueInput!]
  set: [PodMetaWhereUniqueInput!]
  update: [PodMetaUpdateWithWhereUniqueWithoutPodInput!]
  updateMany: [PodMetaUpdateManyWithWhereNestedInput!]
  upsert: [PodMetaUpsertWithWhereUniqueWithoutPodInput!]
}

input PodMetaUpdateManyWithWhereNestedInput {
  data: PodMetaUpdateManyDataInput!
  where: PodMetaScalarWhereInput!
}

input PodMetaUpdateWithoutPodDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input PodMetaUpdateWithWhereUniqueWithoutPodInput {
  data: PodMetaUpdateWithoutPodDataInput!
  where: PodMetaWhereUniqueInput!
}

input PodMetaUpsertWithWhereUniqueWithoutPodInput {
  create: PodMetaCreateWithoutPodInput!
  update: PodMetaUpdateWithoutPodDataInput!
  where: PodMetaWhereUniqueInput!
}

input PodMetaWhereInput {
  AND: [PodMetaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [PodMetaWhereInput!]
  OR: [PodMetaWhereInput!]
  pod: PodWhereInput
  updatedAt: DateTimeFilter
}

input PodMetaWhereUniqueInput {
  id: String
}

input PodOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input PodScalarWhereInput {
  AND: [PodScalarWhereInput!]
  categories: CategoryFilter
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: PodMetaFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  members: UserFilter
  NOT: [PodScalarWhereInput!]
  notifications: NotificationFilter
  OR: [PodScalarWhereInput!]
  posts: PostFilter
  updatedAt: DateTimeFilter
}

input PodUpdateInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  notifications: NotificationUpdateManyWithoutPodInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input PodUpdateManyWithoutCategoriesInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutCategoriesInput!]
  delete: [PodWhereUniqueInput!]
  deleteMany: [PodScalarWhereInput!]
  disconnect: [PodWhereUniqueInput!]
  set: [PodWhereUniqueInput!]
  update: [PodUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [PodUpdateManyWithWhereNestedInput!]
  upsert: [PodUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input PodUpdateManyWithoutMembersInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutMembersInput!]
  delete: [PodWhereUniqueInput!]
  deleteMany: [PodScalarWhereInput!]
  disconnect: [PodWhereUniqueInput!]
  set: [PodWhereUniqueInput!]
  update: [PodUpdateWithWhereUniqueWithoutMembersInput!]
  updateMany: [PodUpdateManyWithWhereNestedInput!]
  upsert: [PodUpsertWithWhereUniqueWithoutMembersInput!]
}

input PodUpdateManyWithoutUserInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutUserInput!]
  delete: [PodWhereUniqueInput!]
  deleteMany: [PodScalarWhereInput!]
  disconnect: [PodWhereUniqueInput!]
  set: [PodWhereUniqueInput!]
  update: [PodUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PodUpdateManyWithWhereNestedInput!]
  upsert: [PodUpsertWithWhereUniqueWithoutUserInput!]
}

input PodUpdateManyWithWhereNestedInput {
  data: PodUpdateManyDataInput!
  where: PodScalarWhereInput!
}

input PodUpdateOneRequiredWithoutPostsInput {
  connect: PodWhereUniqueInput
  create: PodCreateWithoutPostsInput
  update: PodUpdateWithoutPostsDataInput
  upsert: PodUpsertWithoutPostsInput
}

input PodUpdateOneWithoutNotificationsInput {
  connect: PodWhereUniqueInput
  create: PodCreateWithoutNotificationsInput
  delete: Boolean
  disconnect: Boolean
  update: PodUpdateWithoutNotificationsDataInput
  upsert: PodUpsertWithoutNotificationsInput
}

input PodUpdateWithoutCategoriesDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  notifications: NotificationUpdateManyWithoutPodInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateWithoutMembersDataInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notifications: NotificationUpdateManyWithoutPodInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateWithoutNotificationsDataInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateWithoutPostsDataInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  notifications: NotificationUpdateManyWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateWithoutUserDataInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  notifications: NotificationUpdateManyWithoutPodInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
}

input PodUpdateWithWhereUniqueWithoutCategoriesInput {
  data: PodUpdateWithoutCategoriesDataInput!
  where: PodWhereUniqueInput!
}

input PodUpdateWithWhereUniqueWithoutMembersInput {
  data: PodUpdateWithoutMembersDataInput!
  where: PodWhereUniqueInput!
}

input PodUpdateWithWhereUniqueWithoutUserInput {
  data: PodUpdateWithoutUserDataInput!
  where: PodWhereUniqueInput!
}

input PodUpsertWithoutNotificationsInput {
  create: PodCreateWithoutNotificationsInput!
  update: PodUpdateWithoutNotificationsDataInput!
}

input PodUpsertWithoutPostsInput {
  create: PodCreateWithoutPostsInput!
  update: PodUpdateWithoutPostsDataInput!
}

input PodUpsertWithWhereUniqueWithoutCategoriesInput {
  create: PodCreateWithoutCategoriesInput!
  update: PodUpdateWithoutCategoriesDataInput!
  where: PodWhereUniqueInput!
}

input PodUpsertWithWhereUniqueWithoutMembersInput {
  create: PodCreateWithoutMembersInput!
  update: PodUpdateWithoutMembersDataInput!
  where: PodWhereUniqueInput!
}

input PodUpsertWithWhereUniqueWithoutUserInput {
  create: PodCreateWithoutUserInput!
  update: PodUpdateWithoutUserDataInput!
  where: PodWhereUniqueInput!
}

input PodWhereInput {
  AND: [PodWhereInput!]
  categories: CategoryFilter
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: PodMetaFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  members: UserFilter
  NOT: [PodWhereInput!]
  notifications: NotificationFilter
  OR: [PodWhereInput!]
  posts: PostFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input PodWhereUniqueInput {
  id: String
}

type Post {
  annotations(after: AnnotationWhereUniqueInput, before: AnnotationWhereUniqueInput, first: Int, last: Int, skip: Int): [Annotation!]!
  createdAt: DateTime!
  favorites(after: FavoriteWhereUniqueInput, before: FavoriteWhereUniqueInput, first: Int, last: Int, skip: Int): [Favorite!]!
  id: String!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: PostMetaWhereUniqueInput, before: PostMetaWhereUniqueInput, first: Int, last: Int, skip: Int): [PostMeta!]!
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  pod: Pod!
  questions(after: QuestionWhereUniqueInput, before: QuestionWhereUniqueInput, first: Int, last: Int, skip: Int): [Question!]!
  reviews(after: ReviewWhereUniqueInput, before: ReviewWhereUniqueInput, first: Int, last: Int, skip: Int): [Review!]!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, skip: Int): [Tag!]!
  updatedAt: DateTime!
  user: User!
}

input PostCreateInput {
  annotations: AnnotationCreateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutPostInput
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutPostInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notifications: NotificationCreateManyWithoutPostInput
  pod: PodCreateOneWithoutPostsInput!
  questions: QuestionCreateManyWithoutPostInput
  reviews: ReviewCreateManyWithoutPostInput
  tags: TagCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutPodInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutPodInput!]
}

input PostCreateManyWithoutTagsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutTagsInput!]
}

input PostCreateManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutUserInput!]
}

input PostCreateOneWithoutAnnotationsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutAnnotationsInput
}

input PostCreateOneWithoutFavoritesInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutFavoritesInput
}

input PostCreateOneWithoutNotificationsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutNotificationsInput
}

input PostCreateOneWithoutQuestionsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutQuestionsInput
}

input PostCreateOneWithoutReviewsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutReviewsInput
}

input PostCreateWithoutAnnotationsInput {
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutPostInput
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutPostInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notifications: NotificationCreateManyWithoutPostInput
  pod: PodCreateOneWithoutPostsInput!
  questions: QuestionCreateManyWithoutPostInput
  reviews: ReviewCreateManyWithoutPostInput
  tags: TagCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateWithoutFavoritesInput {
  annotations: AnnotationCreateManyWithoutPostInput
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutPostInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notifications: NotificationCreateManyWithoutPostInput
  pod: PodCreateOneWithoutPostsInput!
  questions: QuestionCreateManyWithoutPostInput
  reviews: ReviewCreateManyWithoutPostInput
  tags: TagCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateWithoutNotificationsInput {
  annotations: AnnotationCreateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutPostInput
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutPostInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  pod: PodCreateOneWithoutPostsInput!
  questions: QuestionCreateManyWithoutPostInput
  reviews: ReviewCreateManyWithoutPostInput
  tags: TagCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateWithoutPodInput {
  annotations: AnnotationCreateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutPostInput
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutPostInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notifications: NotificationCreateManyWithoutPostInput
  questions: QuestionCreateManyWithoutPostInput
  reviews: ReviewCreateManyWithoutPostInput
  tags: TagCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateWithoutQuestionsInput {
  annotations: AnnotationCreateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutPostInput
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutPostInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notifications: NotificationCreateManyWithoutPostInput
  pod: PodCreateOneWithoutPostsInput!
  reviews: ReviewCreateManyWithoutPostInput
  tags: TagCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateWithoutReviewsInput {
  annotations: AnnotationCreateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutPostInput
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutPostInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notifications: NotificationCreateManyWithoutPostInput
  pod: PodCreateOneWithoutPostsInput!
  questions: QuestionCreateManyWithoutPostInput
  tags: TagCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateWithoutTagsInput {
  annotations: AnnotationCreateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutPostInput
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutPostInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notifications: NotificationCreateManyWithoutPostInput
  pod: PodCreateOneWithoutPostsInput!
  questions: QuestionCreateManyWithoutPostInput
  reviews: ReviewCreateManyWithoutPostInput
  updatedAt: DateTime
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateWithoutUserInput {
  annotations: AnnotationCreateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutPostInput
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutPostInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notifications: NotificationCreateManyWithoutPostInput
  pod: PodCreateOneWithoutPostsInput!
  questions: QuestionCreateManyWithoutPostInput
  reviews: ReviewCreateManyWithoutPostInput
  tags: TagCreateManyWithoutPostsInput
  updatedAt: DateTime
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMeta {
  id: String!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  post: Post!
}

input PostMetaCreateManyWithoutPostInput {
  connect: [PostMetaWhereUniqueInput!]
  create: [PostMetaCreateWithoutPostInput!]
}

input PostMetaCreateWithoutPostInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input PostMetaFilter {
  every: PostMetaWhereInput
  none: PostMetaWhereInput
  some: PostMetaWhereInput
}

input PostMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input PostMetaScalarWhereInput {
  AND: [PostMetaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [PostMetaScalarWhereInput!]
  OR: [PostMetaScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input PostMetaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input PostMetaUpdateManyWithoutPostInput {
  connect: [PostMetaWhereUniqueInput!]
  create: [PostMetaCreateWithoutPostInput!]
  delete: [PostMetaWhereUniqueInput!]
  deleteMany: [PostMetaScalarWhereInput!]
  disconnect: [PostMetaWhereUniqueInput!]
  set: [PostMetaWhereUniqueInput!]
  update: [PostMetaUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [PostMetaUpdateManyWithWhereNestedInput!]
  upsert: [PostMetaUpsertWithWhereUniqueWithoutPostInput!]
}

input PostMetaUpdateManyWithWhereNestedInput {
  data: PostMetaUpdateManyDataInput!
  where: PostMetaScalarWhereInput!
}

input PostMetaUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input PostMetaUpdateWithWhereUniqueWithoutPostInput {
  data: PostMetaUpdateWithoutPostDataInput!
  where: PostMetaWhereUniqueInput!
}

input PostMetaUpsertWithWhereUniqueWithoutPostInput {
  create: PostMetaCreateWithoutPostInput!
  update: PostMetaUpdateWithoutPostDataInput!
  where: PostMetaWhereUniqueInput!
}

input PostMetaWhereInput {
  AND: [PostMetaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [PostMetaWhereInput!]
  OR: [PostMetaWhereInput!]
  post: PostWhereInput
  updatedAt: DateTimeFilter
}

input PostMetaWhereUniqueInput {
  id: String
}

input PostOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemMimeType: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  annotations: AnnotationFilter
  createdAt: DateTimeFilter
  favorites: FavoriteFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: PostMetaFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [PostScalarWhereInput!]
  notifications: NotificationFilter
  OR: [PostScalarWhereInput!]
  questions: QuestionFilter
  reviews: ReviewFilter
  tags: TagFilter
  updatedAt: DateTimeFilter
}

input PostUpdateInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notifications: NotificationUpdateManyWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input PostUpdateManyWithoutPodInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutPodInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPodInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPodInput!]
}

input PostUpdateManyWithoutTagsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutTagsInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTagsInput!]
}

input PostUpdateManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateOneRequiredWithoutAnnotationsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutAnnotationsInput
  update: PostUpdateWithoutAnnotationsDataInput
  upsert: PostUpsertWithoutAnnotationsInput
}

input PostUpdateOneRequiredWithoutFavoritesInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutFavoritesInput
  update: PostUpdateWithoutFavoritesDataInput
  upsert: PostUpsertWithoutFavoritesInput
}

input PostUpdateOneRequiredWithoutQuestionsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutQuestionsInput
  update: PostUpdateWithoutQuestionsDataInput
  upsert: PostUpsertWithoutQuestionsInput
}

input PostUpdateOneRequiredWithoutReviewsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutReviewsInput
  update: PostUpdateWithoutReviewsDataInput
  upsert: PostUpsertWithoutReviewsInput
}

input PostUpdateOneWithoutNotificationsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutNotificationsInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutNotificationsDataInput
  upsert: PostUpsertWithoutNotificationsInput
}

input PostUpdateWithoutAnnotationsDataInput {
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notifications: NotificationUpdateManyWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutFavoritesDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notifications: NotificationUpdateManyWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutNotificationsDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutPodDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notifications: NotificationUpdateManyWithoutPostInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutQuestionsDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notifications: NotificationUpdateManyWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutReviewsDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notifications: NotificationUpdateManyWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutTagsDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notifications: NotificationUpdateManyWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutUserDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notifications: NotificationUpdateManyWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
}

input PostUpdateWithWhereUniqueWithoutPodInput {
  data: PostUpdateWithoutPodDataInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutTagsInput {
  data: PostUpdateWithoutTagsDataInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  data: PostUpdateWithoutUserDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutAnnotationsInput {
  create: PostCreateWithoutAnnotationsInput!
  update: PostUpdateWithoutAnnotationsDataInput!
}

input PostUpsertWithoutFavoritesInput {
  create: PostCreateWithoutFavoritesInput!
  update: PostUpdateWithoutFavoritesDataInput!
}

input PostUpsertWithoutNotificationsInput {
  create: PostCreateWithoutNotificationsInput!
  update: PostUpdateWithoutNotificationsDataInput!
}

input PostUpsertWithoutQuestionsInput {
  create: PostCreateWithoutQuestionsInput!
  update: PostUpdateWithoutQuestionsDataInput!
}

input PostUpsertWithoutReviewsInput {
  create: PostCreateWithoutReviewsInput!
  update: PostUpdateWithoutReviewsDataInput!
}

input PostUpsertWithWhereUniqueWithoutPodInput {
  create: PostCreateWithoutPodInput!
  update: PostUpdateWithoutPodDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutTagsInput {
  create: PostCreateWithoutTagsInput!
  update: PostUpdateWithoutTagsDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  create: PostCreateWithoutUserInput!
  update: PostUpdateWithoutUserDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  annotations: AnnotationFilter
  createdAt: DateTimeFilter
  favorites: FavoriteFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: PostMetaFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [PostWhereInput!]
  notifications: NotificationFilter
  OR: [PostWhereInput!]
  pod: PodWhereInput
  questions: QuestionFilter
  reviews: ReviewFilter
  tags: TagFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  annotation(where: AnnotationWhereUniqueInput!): Annotation
  annotationMetas(after: AnnotationMetaWhereUniqueInput, before: AnnotationMetaWhereUniqueInput, first: Int, last: Int, orderBy: AnnotationMetaOrderByInput, skip: Int, where: AnnotationMetaWhereInput): [AnnotationMeta!]!
  annotations(after: AnnotationWhereUniqueInput, before: AnnotationWhereUniqueInput, first: Int, last: Int, orderBy: AnnotationOrderByInput, skip: Int, where: AnnotationWhereInput): [Annotation!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  favorite(where: FavoriteWhereUniqueInput!): Favorite
  favorites(after: FavoriteWhereUniqueInput, before: FavoriteWhereUniqueInput, first: Int, last: Int, orderBy: FavoriteOrderByInput, skip: Int, where: FavoriteWhereInput): [Favorite!]!
  message(where: MessageWhereUniqueInput!): Message
  messageMetas(after: MessageMetaWhereUniqueInput, before: MessageMetaWhereUniqueInput, first: Int, last: Int, orderBy: MessageMetaOrderByInput, skip: Int, where: MessageMetaWhereInput): [MessageMeta!]!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]!
  notification(where: NotificationWhereUniqueInput!): Notification
  notificationMetas(after: NotificationMetaWhereUniqueInput, before: NotificationMetaWhereUniqueInput, first: Int, last: Int, orderBy: NotificationMetaOrderByInput, skip: Int, where: NotificationMetaWhereInput): [NotificationMeta!]!
  notifications(after: NotificationWhereUniqueInput, before: NotificationWhereUniqueInput, first: Int, last: Int, orderBy: NotificationOrderByInput, skip: Int, where: NotificationWhereInput): [Notification!]!
  pod(where: PodWhereUniqueInput!): Pod
  podMetas(after: PodMetaWhereUniqueInput, before: PodMetaWhereUniqueInput, first: Int, last: Int, orderBy: PodMetaOrderByInput, skip: Int, where: PodMetaWhereInput): [PodMeta!]!
  pods(after: PodWhereUniqueInput, before: PodWhereUniqueInput, first: Int, last: Int, orderBy: PodOrderByInput, skip: Int, where: PodWhereInput): [Pod!]!
  post(where: PostWhereUniqueInput!): Post
  postMetas(after: PostMetaWhereUniqueInput, before: PostMetaWhereUniqueInput, first: Int, last: Int, orderBy: PostMetaOrderByInput, skip: Int, where: PostMetaWhereInput): [PostMeta!]!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]!
  question(where: QuestionWhereUniqueInput!): Question
  questionMetas(after: QuestionMetaWhereUniqueInput, before: QuestionMetaWhereUniqueInput, first: Int, last: Int, orderBy: QuestionMetaOrderByInput, skip: Int, where: QuestionMetaWhereInput): [QuestionMeta!]!
  questions(after: QuestionWhereUniqueInput, before: QuestionWhereUniqueInput, first: Int, last: Int, orderBy: QuestionOrderByInput, skip: Int, where: QuestionWhereInput): [Question!]!
  review(where: ReviewWhereUniqueInput!): Review
  reviewMetas(after: ReviewMetaWhereUniqueInput, before: ReviewMetaWhereUniqueInput, first: Int, last: Int, orderBy: ReviewMetaOrderByInput, skip: Int, where: ReviewMetaWhereInput): [ReviewMeta!]!
  reviews(after: ReviewWhereUniqueInput, before: ReviewWhereUniqueInput, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): [Review!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, orderBy: TagOrderByInput, skip: Int, where: TagWhereInput): [Tag!]!
  thread(where: ThreadWhereUniqueInput!): Thread
  threadMetas(after: ThreadMetaWhereUniqueInput, before: ThreadMetaWhereUniqueInput, first: Int, last: Int, orderBy: ThreadMetaOrderByInput, skip: Int, where: ThreadMetaWhereInput): [ThreadMeta!]!
  threads(after: ThreadWhereUniqueInput, before: ThreadWhereUniqueInput, first: Int, last: Int, orderBy: ThreadOrderByInput, skip: Int, where: ThreadWhereInput): [Thread!]!
  user(where: UserWhereUniqueInput!): User
  userMetas(after: UserMetaWhereUniqueInput, before: UserMetaWhereUniqueInput, first: Int, last: Int, orderBy: UserMetaOrderByInput, skip: Int, where: UserMetaWhereInput): [UserMeta!]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

type Question {
  createdAt: DateTime!
  id: String!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: QuestionMetaWhereUniqueInput, before: QuestionMetaWhereUniqueInput, first: Int, last: Int, skip: Int): [QuestionMeta!]!
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: Post!
  updatedAt: DateTime!
  user: User!
}

input QuestionCreateInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: QuestionMetaCreateManyWithoutQuestionInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutQuestionsInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutQuestionsInput!
}

input QuestionCreateManyWithoutPostInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutPostInput!]
}

input QuestionCreateManyWithoutUserInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutUserInput!]
}

input QuestionCreateWithoutPostInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: QuestionMetaCreateManyWithoutQuestionInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutQuestionsInput!
}

input QuestionCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: QuestionMetaCreateManyWithoutQuestionInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutQuestionsInput!
  updatedAt: DateTime
}

input QuestionFilter {
  every: QuestionWhereInput
  none: QuestionWhereInput
  some: QuestionWhereInput
}

type QuestionMeta {
  id: String!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  question: Question!
}

input QuestionMetaCreateManyWithoutQuestionInput {
  connect: [QuestionMetaWhereUniqueInput!]
  create: [QuestionMetaCreateWithoutQuestionInput!]
}

input QuestionMetaCreateWithoutQuestionInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input QuestionMetaFilter {
  every: QuestionMetaWhereInput
  none: QuestionMetaWhereInput
  some: QuestionMetaWhereInput
}

input QuestionMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QuestionMetaScalarWhereInput {
  AND: [QuestionMetaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QuestionMetaScalarWhereInput!]
  OR: [QuestionMetaScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input QuestionMetaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input QuestionMetaUpdateManyWithoutQuestionInput {
  connect: [QuestionMetaWhereUniqueInput!]
  create: [QuestionMetaCreateWithoutQuestionInput!]
  delete: [QuestionMetaWhereUniqueInput!]
  deleteMany: [QuestionMetaScalarWhereInput!]
  disconnect: [QuestionMetaWhereUniqueInput!]
  set: [QuestionMetaWhereUniqueInput!]
  update: [QuestionMetaUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [QuestionMetaUpdateManyWithWhereNestedInput!]
  upsert: [QuestionMetaUpsertWithWhereUniqueWithoutQuestionInput!]
}

input QuestionMetaUpdateManyWithWhereNestedInput {
  data: QuestionMetaUpdateManyDataInput!
  where: QuestionMetaScalarWhereInput!
}

input QuestionMetaUpdateWithoutQuestionDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input QuestionMetaUpdateWithWhereUniqueWithoutQuestionInput {
  data: QuestionMetaUpdateWithoutQuestionDataInput!
  where: QuestionMetaWhereUniqueInput!
}

input QuestionMetaUpsertWithWhereUniqueWithoutQuestionInput {
  create: QuestionMetaCreateWithoutQuestionInput!
  update: QuestionMetaUpdateWithoutQuestionDataInput!
  where: QuestionMetaWhereUniqueInput!
}

input QuestionMetaWhereInput {
  AND: [QuestionMetaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QuestionMetaWhereInput!]
  OR: [QuestionMetaWhereInput!]
  question: QuestionWhereInput
  updatedAt: DateTimeFilter
}

input QuestionMetaWhereUniqueInput {
  id: String
}

input QuestionOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemMimeType: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input QuestionScalarWhereInput {
  AND: [QuestionScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QuestionMetaFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [QuestionScalarWhereInput!]
  OR: [QuestionScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input QuestionUpdateInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: QuestionMetaUpdateManyWithoutQuestionInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutQuestionsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutQuestionsInput
}

input QuestionUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input QuestionUpdateManyWithoutPostInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutPostInput!]
  delete: [QuestionWhereUniqueInput!]
  deleteMany: [QuestionScalarWhereInput!]
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutPostInput!]
}

input QuestionUpdateManyWithoutUserInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutUserInput!]
  delete: [QuestionWhereUniqueInput!]
  deleteMany: [QuestionScalarWhereInput!]
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUserInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  data: QuestionUpdateManyDataInput!
  where: QuestionScalarWhereInput!
}

input QuestionUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: QuestionMetaUpdateManyWithoutQuestionInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutQuestionsInput
}

input QuestionUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: QuestionMetaUpdateManyWithoutQuestionInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutQuestionsInput
  updatedAt: DateTime
}

input QuestionUpdateWithWhereUniqueWithoutPostInput {
  data: QuestionUpdateWithoutPostDataInput!
  where: QuestionWhereUniqueInput!
}

input QuestionUpdateWithWhereUniqueWithoutUserInput {
  data: QuestionUpdateWithoutUserDataInput!
  where: QuestionWhereUniqueInput!
}

input QuestionUpsertWithWhereUniqueWithoutPostInput {
  create: QuestionCreateWithoutPostInput!
  update: QuestionUpdateWithoutPostDataInput!
  where: QuestionWhereUniqueInput!
}

input QuestionUpsertWithWhereUniqueWithoutUserInput {
  create: QuestionCreateWithoutUserInput!
  update: QuestionUpdateWithoutUserDataInput!
  where: QuestionWhereUniqueInput!
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QuestionMetaFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  post: PostWhereInput
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input QuestionWhereUniqueInput {
  id: String
}

type Review {
  createdAt: DateTime!
  id: String!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: ReviewMetaWhereUniqueInput, before: ReviewMetaWhereUniqueInput, first: Int, last: Int, skip: Int): [ReviewMeta!]!
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: Post!
  updatedAt: DateTime!
  user: User!
}

input ReviewCreateInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ReviewMetaCreateManyWithoutReviewInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutReviewsInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutReviewsInput!
}

input ReviewCreateManyWithoutPostInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutPostInput!]
}

input ReviewCreateManyWithoutUserInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutUserInput!]
}

input ReviewCreateWithoutPostInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ReviewMetaCreateManyWithoutReviewInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutReviewsInput!
}

input ReviewCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ReviewMetaCreateManyWithoutReviewInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutReviewsInput!
  updatedAt: DateTime
}

input ReviewFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

type ReviewMeta {
  id: String!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  review: Review!
}

input ReviewMetaCreateManyWithoutReviewInput {
  connect: [ReviewMetaWhereUniqueInput!]
  create: [ReviewMetaCreateWithoutReviewInput!]
}

input ReviewMetaCreateWithoutReviewInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input ReviewMetaFilter {
  every: ReviewMetaWhereInput
  none: ReviewMetaWhereInput
  some: ReviewMetaWhereInput
}

input ReviewMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input ReviewMetaScalarWhereInput {
  AND: [ReviewMetaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [ReviewMetaScalarWhereInput!]
  OR: [ReviewMetaScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input ReviewMetaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input ReviewMetaUpdateManyWithoutReviewInput {
  connect: [ReviewMetaWhereUniqueInput!]
  create: [ReviewMetaCreateWithoutReviewInput!]
  delete: [ReviewMetaWhereUniqueInput!]
  deleteMany: [ReviewMetaScalarWhereInput!]
  disconnect: [ReviewMetaWhereUniqueInput!]
  set: [ReviewMetaWhereUniqueInput!]
  update: [ReviewMetaUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [ReviewMetaUpdateManyWithWhereNestedInput!]
  upsert: [ReviewMetaUpsertWithWhereUniqueWithoutReviewInput!]
}

input ReviewMetaUpdateManyWithWhereNestedInput {
  data: ReviewMetaUpdateManyDataInput!
  where: ReviewMetaScalarWhereInput!
}

input ReviewMetaUpdateWithoutReviewDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input ReviewMetaUpdateWithWhereUniqueWithoutReviewInput {
  data: ReviewMetaUpdateWithoutReviewDataInput!
  where: ReviewMetaWhereUniqueInput!
}

input ReviewMetaUpsertWithWhereUniqueWithoutReviewInput {
  create: ReviewMetaCreateWithoutReviewInput!
  update: ReviewMetaUpdateWithoutReviewDataInput!
  where: ReviewMetaWhereUniqueInput!
}

input ReviewMetaWhereInput {
  AND: [ReviewMetaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [ReviewMetaWhereInput!]
  OR: [ReviewMetaWhereInput!]
  review: ReviewWhereInput
  updatedAt: DateTimeFilter
}

input ReviewMetaWhereUniqueInput {
  id: String
}

input ReviewOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemMimeType: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: ReviewMetaFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input ReviewUpdateInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ReviewMetaUpdateManyWithoutReviewInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutReviewsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input ReviewUpdateManyWithoutPostInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutPostInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutPostInput!]
}

input ReviewUpdateManyWithoutUserInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutUserInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  data: ReviewUpdateManyDataInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ReviewMetaUpdateManyWithoutReviewInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ReviewMetaUpdateManyWithoutReviewInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutReviewsInput
  updatedAt: DateTime
}

input ReviewUpdateWithWhereUniqueWithoutPostInput {
  data: ReviewUpdateWithoutPostDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  data: ReviewUpdateWithoutUserDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutPostInput {
  create: ReviewCreateWithoutPostInput!
  update: ReviewUpdateWithoutPostDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  update: ReviewUpdateWithoutUserDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: ReviewMetaFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  post: PostWhereInput
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input ReviewWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Tag {
  createdAt: DateTime!
  id: String!
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, skip: Int): [Post!]!
  updatedAt: DateTime!
}

input TagCreateInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  posts: PostCreateManyWithoutTagsInput
  updatedAt: DateTime
}

input TagCreateManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostsInput!]
}

input TagCreateWithoutPostsInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
}

input TagFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  posts: PostFilter
  updatedAt: DateTimeFilter
}

input TagUpdateInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  posts: PostUpdateManyWithoutTagsInput
  updatedAt: DateTime
}

input TagUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input TagUpdateManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostsInput!]
}

input TagUpdateManyWithWhereNestedInput {
  data: TagUpdateManyDataInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutPostsDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input TagUpdateWithWhereUniqueWithoutPostsInput {
  data: TagUpdateWithoutPostsDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutPostsInput {
  create: TagCreateWithoutPostsInput!
  update: TagUpdateWithoutPostsDataInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  posts: PostFilter
  updatedAt: DateTimeFilter
}

input TagWhereUniqueInput {
  id: String
}

type Thread {
  createdAt: DateTime!
  id: String!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: ThreadMetaWhereUniqueInput, before: ThreadMetaWhereUniqueInput, first: Int, last: Int, skip: Int): [ThreadMeta!]!
  itemName: String!
  itemStatus: String!
  itemType: String!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int, skip: Int): [Message!]!
  participants(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  updatedAt: DateTime!
}

input ThreadCreateInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ThreadMetaCreateManyWithoutThreadInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  messages: MessageCreateManyWithoutThreadInput
  participants: UserCreateManyWithoutThreadsInput
  updatedAt: DateTime
}

input ThreadCreateManyWithoutParticipantsInput {
  connect: [ThreadWhereUniqueInput!]
  create: [ThreadCreateWithoutParticipantsInput!]
}

input ThreadCreateOneWithoutMessagesInput {
  connect: ThreadWhereUniqueInput
  create: ThreadCreateWithoutMessagesInput
}

input ThreadCreateWithoutMessagesInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ThreadMetaCreateManyWithoutThreadInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  participants: UserCreateManyWithoutThreadsInput
  updatedAt: DateTime
}

input ThreadCreateWithoutParticipantsInput {
  createdAt: DateTime
  id: String
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ThreadMetaCreateManyWithoutThreadInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  messages: MessageCreateManyWithoutThreadInput
  updatedAt: DateTime
}

input ThreadFilter {
  every: ThreadWhereInput
  none: ThreadWhereInput
  some: ThreadWhereInput
}

type ThreadMeta {
  id: String!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  thread: Thread!
}

input ThreadMetaCreateManyWithoutThreadInput {
  connect: [ThreadMetaWhereUniqueInput!]
  create: [ThreadMetaCreateWithoutThreadInput!]
}

input ThreadMetaCreateWithoutThreadInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input ThreadMetaFilter {
  every: ThreadMetaWhereInput
  none: ThreadMetaWhereInput
  some: ThreadMetaWhereInput
}

input ThreadMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input ThreadMetaScalarWhereInput {
  AND: [ThreadMetaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [ThreadMetaScalarWhereInput!]
  OR: [ThreadMetaScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input ThreadMetaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input ThreadMetaUpdateManyWithoutThreadInput {
  connect: [ThreadMetaWhereUniqueInput!]
  create: [ThreadMetaCreateWithoutThreadInput!]
  delete: [ThreadMetaWhereUniqueInput!]
  deleteMany: [ThreadMetaScalarWhereInput!]
  disconnect: [ThreadMetaWhereUniqueInput!]
  set: [ThreadMetaWhereUniqueInput!]
  update: [ThreadMetaUpdateWithWhereUniqueWithoutThreadInput!]
  updateMany: [ThreadMetaUpdateManyWithWhereNestedInput!]
  upsert: [ThreadMetaUpsertWithWhereUniqueWithoutThreadInput!]
}

input ThreadMetaUpdateManyWithWhereNestedInput {
  data: ThreadMetaUpdateManyDataInput!
  where: ThreadMetaScalarWhereInput!
}

input ThreadMetaUpdateWithoutThreadDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input ThreadMetaUpdateWithWhereUniqueWithoutThreadInput {
  data: ThreadMetaUpdateWithoutThreadDataInput!
  where: ThreadMetaWhereUniqueInput!
}

input ThreadMetaUpsertWithWhereUniqueWithoutThreadInput {
  create: ThreadMetaCreateWithoutThreadInput!
  update: ThreadMetaUpdateWithoutThreadDataInput!
  where: ThreadMetaWhereUniqueInput!
}

input ThreadMetaWhereInput {
  AND: [ThreadMetaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [ThreadMetaWhereInput!]
  OR: [ThreadMetaWhereInput!]
  thread: ThreadWhereInput
  updatedAt: DateTimeFilter
}

input ThreadMetaWhereUniqueInput {
  id: String
}

input ThreadOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input ThreadScalarWhereInput {
  AND: [ThreadScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: ThreadMetaFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  messages: MessageFilter
  NOT: [ThreadScalarWhereInput!]
  OR: [ThreadScalarWhereInput!]
  participants: UserFilter
  updatedAt: DateTimeFilter
}

input ThreadUpdateInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ThreadMetaUpdateManyWithoutThreadInput
  itemName: String
  itemStatus: String
  itemType: String
  messages: MessageUpdateManyWithoutThreadInput
  participants: UserUpdateManyWithoutThreadsInput
  updatedAt: DateTime
}

input ThreadUpdateManyDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input ThreadUpdateManyWithoutParticipantsInput {
  connect: [ThreadWhereUniqueInput!]
  create: [ThreadCreateWithoutParticipantsInput!]
  delete: [ThreadWhereUniqueInput!]
  deleteMany: [ThreadScalarWhereInput!]
  disconnect: [ThreadWhereUniqueInput!]
  set: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutParticipantsInput!]
  updateMany: [ThreadUpdateManyWithWhereNestedInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutParticipantsInput!]
}

input ThreadUpdateManyWithWhereNestedInput {
  data: ThreadUpdateManyDataInput!
  where: ThreadScalarWhereInput!
}

input ThreadUpdateOneRequiredWithoutMessagesInput {
  connect: ThreadWhereUniqueInput
  create: ThreadCreateWithoutMessagesInput
  update: ThreadUpdateWithoutMessagesDataInput
  upsert: ThreadUpsertWithoutMessagesInput
}

input ThreadUpdateWithoutMessagesDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ThreadMetaUpdateManyWithoutThreadInput
  itemName: String
  itemStatus: String
  itemType: String
  participants: UserUpdateManyWithoutThreadsInput
  updatedAt: DateTime
}

input ThreadUpdateWithoutParticipantsDataInput {
  createdAt: DateTime
  id: String
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ThreadMetaUpdateManyWithoutThreadInput
  itemName: String
  itemStatus: String
  itemType: String
  messages: MessageUpdateManyWithoutThreadInput
  updatedAt: DateTime
}

input ThreadUpdateWithWhereUniqueWithoutParticipantsInput {
  data: ThreadUpdateWithoutParticipantsDataInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpsertWithoutMessagesInput {
  create: ThreadCreateWithoutMessagesInput!
  update: ThreadUpdateWithoutMessagesDataInput!
}

input ThreadUpsertWithWhereUniqueWithoutParticipantsInput {
  create: ThreadCreateWithoutParticipantsInput!
  update: ThreadUpdateWithoutParticipantsDataInput!
  where: ThreadWhereUniqueInput!
}

input ThreadWhereInput {
  AND: [ThreadWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: ThreadMetaFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  messages: MessageFilter
  NOT: [ThreadWhereInput!]
  OR: [ThreadWhereInput!]
  participants: UserFilter
  updatedAt: DateTimeFilter
}

input ThreadWhereUniqueInput {
  id: String
}

type User {
  annotations(after: AnnotationWhereUniqueInput, before: AnnotationWhereUniqueInput, first: Int, last: Int, skip: Int): [Annotation!]!
  confirmHash: String!
  createdAt: DateTime!
  favorites(after: FavoriteWhereUniqueInput, before: FavoriteWhereUniqueInput, first: Int, last: Int, skip: Int): [Favorite!]!
  followers(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  following(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  forgotHash: String!
  id: String!
  memberOf(after: PodWhereUniqueInput, before: PodWhereUniqueInput, first: Int, last: Int, skip: Int): [Pod!]!
  memberOfPosts(postId: String, userId: ID): [Post!]
  notifications(after: NotificationWhereUniqueInput, before: NotificationWhereUniqueInput, first: Int, last: Int, skip: Int): [Notification!]!
  pods(after: PodWhereUniqueInput, before: PodWhereUniqueInput, first: Int, last: Int, skip: Int): [Pod!]!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, skip: Int): [Post!]!
  privateHash: String!
  publicHash: String!
  questions(after: QuestionWhereUniqueInput, before: QuestionWhereUniqueInput, first: Int, last: Int, skip: Int): [Question!]!
  recievedNotifications: Notification
  reviews(after: ReviewWhereUniqueInput, before: ReviewWhereUniqueInput, first: Int, last: Int, skip: Int): [Review!]!
  sentNotifications: Notification
  threads(after: ThreadWhereUniqueInput, before: ThreadWhereUniqueInput, first: Int, last: Int, skip: Int): [Thread!]!
  updatedAt: DateTime!
  userConfirmed: Int!
  userDeleted: Boolean!
  userEmail: String!
  userMeta(after: UserMetaWhereUniqueInput, before: UserMetaWhereUniqueInput, first: Int, last: Int, skip: Int): [UserMeta!]!
  userType: Int!
}

input UserCreateInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateManyWithoutMemberOfInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutMemberOfInput!]
}

input UserCreateManyWithoutThreadsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutThreadsInput!]
}

input UserCreateOneWithoutAnnotationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAnnotationsInput
}

input UserCreateOneWithoutFavoritesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFavoritesInput
}

input UserCreateOneWithoutMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessagesInput
}

input UserCreateOneWithoutNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutNotificationsInput
}

input UserCreateOneWithoutPodsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPodsInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOneWithoutQuestionsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutQuestionsInput
}

input UserCreateOneWithoutRecievedNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecievedNotificationsInput
}

input UserCreateOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateOneWithoutSentNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSentNotificationsInput
}

input UserCreateWithoutAnnotationsInput {
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutFavoritesInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutFollowersInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutFollowingInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutMemberOfInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutMessagesInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutNotificationsInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutPodsInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutPostsInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutQuestionsInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutRecievedNotificationsInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutReviewsInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutSentNotificationsInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  threads: ThreadCreateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutThreadsInput {
  annotations: AnnotationCreateManyWithoutUserInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  memberOf: PodCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
  pods: PodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutUserInput
  recievedNotifications: NotificationCreateOneWithoutReceiverInput
  reviews: ReviewCreateManyWithoutUserInput
  sentNotifications: NotificationCreateOneWithoutSenderInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMeta {
  id: String!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  user: User!
}

input UserMetaCreateManyWithoutUserInput {
  connect: [UserMetaWhereUniqueInput!]
  create: [UserMetaCreateWithoutUserInput!]
}

input UserMetaCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input UserMetaFilter {
  every: UserMetaWhereInput
  none: UserMetaWhereInput
  some: UserMetaWhereInput
}

input UserMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input UserMetaScalarWhereInput {
  AND: [UserMetaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [UserMetaScalarWhereInput!]
  OR: [UserMetaScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input UserMetaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input UserMetaUpdateManyWithoutUserInput {
  connect: [UserMetaWhereUniqueInput!]
  create: [UserMetaCreateWithoutUserInput!]
  delete: [UserMetaWhereUniqueInput!]
  deleteMany: [UserMetaScalarWhereInput!]
  disconnect: [UserMetaWhereUniqueInput!]
  set: [UserMetaWhereUniqueInput!]
  update: [UserMetaUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserMetaUpdateManyWithWhereNestedInput!]
  upsert: [UserMetaUpsertWithWhereUniqueWithoutUserInput!]
}

input UserMetaUpdateManyWithWhereNestedInput {
  data: UserMetaUpdateManyDataInput!
  where: UserMetaScalarWhereInput!
}

input UserMetaUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input UserMetaUpdateWithWhereUniqueWithoutUserInput {
  data: UserMetaUpdateWithoutUserDataInput!
  where: UserMetaWhereUniqueInput!
}

input UserMetaUpsertWithWhereUniqueWithoutUserInput {
  create: UserMetaCreateWithoutUserInput!
  update: UserMetaUpdateWithoutUserDataInput!
  where: UserMetaWhereUniqueInput!
}

input UserMetaWhereInput {
  AND: [UserMetaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [UserMetaWhereInput!]
  OR: [UserMetaWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input UserMetaWhereUniqueInput {
  id: String
}

input UserOrderByInput {
  confirmHash: OrderByArg
  createdAt: OrderByArg
  forgotHash: OrderByArg
  id: OrderByArg
  privateHash: OrderByArg
  publicHash: OrderByArg
  updatedAt: OrderByArg
  userConfirmed: OrderByArg
  userDeleted: OrderByArg
  userEmail: OrderByArg
  userPassword: OrderByArg
  userType: OrderByArg
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  annotations: AnnotationFilter
  confirmHash: StringFilter
  createdAt: DateTimeFilter
  favorites: FavoriteFilter
  followers: UserFilter
  following: UserFilter
  forgotHash: StringFilter
  id: StringFilter
  memberOf: PodFilter
  messages: MessageFilter
  NOT: [UserScalarWhereInput!]
  notifications: NotificationFilter
  OR: [UserScalarWhereInput!]
  pods: PodFilter
  posts: PostFilter
  privateHash: StringFilter
  publicHash: StringFilter
  questions: QuestionFilter
  reviews: ReviewFilter
  threads: ThreadFilter
  updatedAt: DateTimeFilter
  userConfirmed: IntFilter
  userDeleted: BooleanFilter
  userEmail: StringFilter
  userMeta: UserMetaFilter
  userPassword: StringFilter
  userType: IntFilter
}

input UserUpdateInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateManyDataInput {
  confirmHash: String
  createdAt: DateTime
  forgotHash: String
  id: String
  privateHash: String
  publicHash: String
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userPassword: String
  userType: Int
}

input UserUpdateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithoutMemberOfInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutMemberOfInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMemberOfInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMemberOfInput!]
}

input UserUpdateManyWithoutThreadsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutThreadsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutThreadsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutThreadsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutAnnotationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAnnotationsInput
  update: UserUpdateWithoutAnnotationsDataInput
  upsert: UserUpsertWithoutAnnotationsInput
}

input UserUpdateOneRequiredWithoutFavoritesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFavoritesInput
  update: UserUpdateWithoutFavoritesDataInput
  upsert: UserUpsertWithoutFavoritesInput
}

input UserUpdateOneRequiredWithoutMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessagesInput
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdateOneRequiredWithoutPodsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPodsInput
  update: UserUpdateWithoutPodsDataInput
  upsert: UserUpsertWithoutPodsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutQuestionsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutQuestionsInput
  update: UserUpdateWithoutQuestionsDataInput
  upsert: UserUpsertWithoutQuestionsInput
}

input UserUpdateOneRequiredWithoutRecievedNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecievedNotificationsInput
  update: UserUpdateWithoutRecievedNotificationsDataInput
  upsert: UserUpsertWithoutRecievedNotificationsInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewsInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneRequiredWithoutSentNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSentNotificationsInput
  update: UserUpdateWithoutSentNotificationsDataInput
  upsert: UserUpsertWithoutSentNotificationsInput
}

input UserUpdateOneWithoutNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutNotificationsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateWithoutAnnotationsDataInput {
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutFavoritesDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutFollowersDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutFollowingDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutMemberOfDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutMessagesDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutNotificationsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutPodsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutPostsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutQuestionsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutRecievedNotificationsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutReviewsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutSentNotificationsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutParticipantsInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutThreadsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: String
  memberOf: PodUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  data: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutMemberOfInput {
  data: UserUpdateWithoutMemberOfDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutThreadsInput {
  data: UserUpdateWithoutThreadsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAnnotationsInput {
  create: UserCreateWithoutAnnotationsInput!
  update: UserUpdateWithoutAnnotationsDataInput!
}

input UserUpsertWithoutFavoritesInput {
  create: UserCreateWithoutFavoritesInput!
  update: UserUpdateWithoutFavoritesDataInput!
}

input UserUpsertWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput!
  update: UserUpdateWithoutMessagesDataInput!
}

input UserUpsertWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  update: UserUpdateWithoutNotificationsDataInput!
}

input UserUpsertWithoutPodsInput {
  create: UserCreateWithoutPodsInput!
  update: UserUpdateWithoutPodsDataInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput!
  update: UserUpdateWithoutQuestionsDataInput!
}

input UserUpsertWithoutRecievedNotificationsInput {
  create: UserCreateWithoutRecievedNotificationsInput!
  update: UserUpdateWithoutRecievedNotificationsDataInput!
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsDataInput!
}

input UserUpsertWithoutSentNotificationsInput {
  create: UserCreateWithoutSentNotificationsInput!
  update: UserUpdateWithoutSentNotificationsDataInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  update: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutMemberOfInput {
  create: UserCreateWithoutMemberOfInput!
  update: UserUpdateWithoutMemberOfDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput!
  update: UserUpdateWithoutThreadsDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  annotations: AnnotationFilter
  confirmHash: StringFilter
  createdAt: DateTimeFilter
  favorites: FavoriteFilter
  followers: UserFilter
  following: UserFilter
  forgotHash: StringFilter
  id: StringFilter
  memberOf: PodFilter
  messages: MessageFilter
  NOT: [UserWhereInput!]
  notifications: NotificationFilter
  OR: [UserWhereInput!]
  pods: PodFilter
  posts: PostFilter
  privateHash: StringFilter
  publicHash: StringFilter
  questions: QuestionFilter
  recievedNotifications: NotificationWhereInput
  reviews: ReviewFilter
  sentNotifications: NotificationWhereInput
  threads: ThreadFilter
  updatedAt: DateTimeFilter
  userConfirmed: IntFilter
  userDeleted: BooleanFilter
  userEmail: StringFilter
  userMeta: UserMetaFilter
  userPassword: StringFilter
  userType: IntFilter
}

input UserWhereUniqueInput {
  confirmHash: String
  forgotHash: String
  id: String
  privateHash: String
  publicHash: String
  userEmail: String
}

### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Annotation {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [AnnotationMeta!]
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: Post!
  user: User!
}

input AnnotationCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: AnnotationMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input AnnotationCreateManyWithoutAnnotationsInput {
  connect: [AnnotationWhereUniqueInput!]
  create: [AnnotationCreateWithoutPostInput!]
}

input AnnotationCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: AnnotationMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input AnnotationCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: AnnotationMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
}

type AnnotationMeta {
  annotation: Annotation!
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
}

input AnnotationMetaCreateManyWithoutItemMetaInput {
  connect: [AnnotationMetaWhereUniqueInput!]
  create: [AnnotationMetaCreateWithoutAnnotationInput!]
}

input AnnotationMetaCreateWithoutAnnotationInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input AnnotationMetaUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input AnnotationMetaUpdateManyWithoutAnnotationInput {
  connect: [AnnotationMetaWhereUniqueInput!]
  create: [AnnotationMetaCreateWithoutAnnotationInput!]
  delete: [AnnotationMetaWhereUniqueInput!]
  deleteMany: [MutationUpdateOneAnnotationWhereInput!]
  disconnect: [AnnotationMetaWhereUniqueInput!]
  set: [AnnotationMetaWhereUniqueInput!]
  update: [AnnotationMetaUpdateWithWhereUniqueWithoutAnnotationInput!]
  updateMany: [AnnotationMetaUpdateManyWithWhereNestedInput!]
  upsert: [AnnotationMetaUpsertWithWhereUniqueWithoutAnnotationInput!]
}

input AnnotationMetaUpdateManyWithWhereNestedInput {
  data: AnnotationMetaUpdateManyDataInput!
  where: MutationUpdateOneAnnotationWhereInput!
}

input AnnotationMetaUpdateWithoutAnnotationDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input AnnotationMetaUpdateWithWhereUniqueWithoutAnnotationInput {
  data: AnnotationMetaUpdateWithoutAnnotationDataInput!
  where: AnnotationMetaWhereUniqueInput!
}

input AnnotationMetaUpsertWithWhereUniqueWithoutAnnotationInput {
  create: AnnotationMetaCreateWithoutAnnotationInput!
  update: AnnotationMetaUpdateWithoutAnnotationDataInput!
  where: AnnotationMetaWhereUniqueInput!
}

input AnnotationMetaWhereUniqueInput {
  id: ID
}

input AnnotationUpdateInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: AnnotationMetaUpdateManyWithoutAnnotationInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutAnnotationsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutAnnotationsInput
}

input AnnotationUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input AnnotationUpdateManyWithoutPostInput {
  connect: [AnnotationWhereUniqueInput!]
  create: [AnnotationCreateWithoutPostInput!]
  delete: [AnnotationWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePostWhereInput!]
  disconnect: [AnnotationWhereUniqueInput!]
  set: [AnnotationWhereUniqueInput!]
  update: [AnnotationUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [AnnotationUpdateManyWithWhereNestedInput!]
  upsert: [AnnotationUpsertWithWhereUniqueWithoutPostInput!]
}

input AnnotationUpdateManyWithoutUserInput {
  connect: [AnnotationWhereUniqueInput!]
  create: [AnnotationCreateWithoutUserInput!]
  delete: [AnnotationWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [AnnotationWhereUniqueInput!]
  set: [AnnotationWhereUniqueInput!]
  update: [AnnotationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AnnotationUpdateManyWithWhereNestedInput!]
  upsert: [AnnotationUpsertWithWhereUniqueWithoutUserInput!]
}

input AnnotationUpdateManyWithWhereNestedInput {
  data: AnnotationUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input AnnotationUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: AnnotationMetaUpdateManyWithoutAnnotationInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutAnnotationsInput
}

input AnnotationUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: AnnotationMetaUpdateManyWithoutAnnotationInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutAnnotationsInput
  updatedAt: DateTime
}

input AnnotationUpdateWithWhereUniqueWithoutPostInput {
  data: AnnotationUpdateWithoutPostDataInput!
  where: AnnotationWhereUniqueInput!
}

input AnnotationUpdateWithWhereUniqueWithoutUserInput {
  data: AnnotationUpdateWithoutUserDataInput!
  where: AnnotationWhereUniqueInput!
}

input AnnotationUpsertWithWhereUniqueWithoutPostInput {
  create: AnnotationCreateWithoutPostInput!
  update: AnnotationUpdateWithoutPostDataInput!
  where: AnnotationWhereUniqueInput!
}

input AnnotationUpsertWithWhereUniqueWithoutUserInput {
  create: AnnotationCreateWithoutUserInput!
  update: AnnotationUpdateWithoutUserDataInput!
  where: AnnotationWhereUniqueInput!
}

input AnnotationWhereUniqueInput {
  id: ID
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Category {
  id: ID!
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  pods(after: String, before: String, first: Int, last: Int, skip: Int): [Pod!]
}

input CategoryCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  pods: PodCreateManyWithoutPodsInput
  updatedAt: DateTime
}

input CategoryCreateManyWithoutCategoriesInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPodsInput!]
}

input CategoryCreateWithoutPodsInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
}

input CategoryUpdateInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  pods: PodUpdateManyWithoutCategoriesInput
  updatedAt: DateTime
}

input CategoryUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input CategoryUpdateManyWithoutPodsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPodsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePodWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutPodsInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutPodsInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  data: CategoryUpdateManyDataInput!
  where: MutationUpdateOnePodWhereInput!
}

input CategoryUpdateWithoutPodsDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input CategoryUpdateWithWhereUniqueWithoutPodsInput {
  data: CategoryUpdateWithoutPodsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutPodsInput {
  create: CategoryCreateWithoutPodsInput!
  update: CategoryUpdateWithoutPodsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereUniqueInput {
  id: ID
}

"""DateTime"""
scalar DateTime

type Favorite {
  id: ID!
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: Post!
  user: User!
}

input FavoriteCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input FavoriteCreateManyWithoutFavoritesInput {
  connect: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateWithoutUserInput!]
}

input FavoriteCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input FavoriteCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
}

input FavoriteUpdateInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  post: PostUpdateOneRequiredWithoutFavoritesInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutFavoritesInput
}

input FavoriteUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input FavoriteUpdateManyWithoutPostInput {
  connect: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateWithoutPostInput!]
  delete: [FavoriteWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePostWhereInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [FavoriteUpdateManyWithWhereNestedInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutPostInput!]
}

input FavoriteUpdateManyWithoutUserInput {
  connect: [FavoriteWhereUniqueInput!]
  create: [FavoriteCreateWithoutUserInput!]
  delete: [FavoriteWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [FavoriteUpdateManyWithWhereNestedInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutUserInput!]
}

input FavoriteUpdateManyWithWhereNestedInput {
  data: FavoriteUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input FavoriteUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutFavoritesInput
}

input FavoriteUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  post: PostUpdateOneRequiredWithoutFavoritesInput
  updatedAt: DateTime
}

input FavoriteUpdateWithWhereUniqueWithoutPostInput {
  data: FavoriteUpdateWithoutPostDataInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUpdateWithWhereUniqueWithoutUserInput {
  data: FavoriteUpdateWithoutUserDataInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUpsertWithWhereUniqueWithoutPostInput {
  create: FavoriteCreateWithoutPostInput!
  update: FavoriteUpdateWithoutPostDataInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteUpsertWithWhereUniqueWithoutUserInput {
  create: FavoriteCreateWithoutUserInput!
  update: FavoriteUpdateWithoutUserDataInput!
  where: FavoriteWhereUniqueInput!
}

input FavoriteWhereUniqueInput {
  id: ID
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Message {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [MessageMeta!]
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: Thread!
  user: User!
}

input MessageCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: MessageMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: ThreadCreateOneWithoutThreadInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input MessageCreateManyWithoutMessagesInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutThreadInput!]
}

input MessageCreateOneWithoutMessageInput {
  connect: MessageWhereUniqueInput
  create: MessageCreateWithoutUserInput
}

input MessageCreateWithoutThreadInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: MessageMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input MessageCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: MessageMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  thread: ThreadCreateOneWithoutThreadInput!
  updatedAt: DateTime
}

type MessageMeta {
  id: ID!
  message: Message!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
}

input MessageMetaCreateManyWithoutItemMetaInput {
  connect: [MessageMetaWhereUniqueInput!]
  create: [MessageMetaCreateWithoutMessageInput!]
}

input MessageMetaCreateWithoutMessageInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input MessageMetaUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input MessageMetaUpdateManyWithoutMessageInput {
  connect: [MessageMetaWhereUniqueInput!]
  create: [MessageMetaCreateWithoutMessageInput!]
  delete: [MessageMetaWhereUniqueInput!]
  deleteMany: [MutationUpdateOneMessageWhereInput!]
  disconnect: [MessageMetaWhereUniqueInput!]
  set: [MessageMetaWhereUniqueInput!]
  update: [MessageMetaUpdateWithWhereUniqueWithoutMessageInput!]
  updateMany: [MessageMetaUpdateManyWithWhereNestedInput!]
  upsert: [MessageMetaUpsertWithWhereUniqueWithoutMessageInput!]
}

input MessageMetaUpdateManyWithWhereNestedInput {
  data: MessageMetaUpdateManyDataInput!
  where: MutationUpdateOneMessageWhereInput!
}

input MessageMetaUpdateWithoutMessageDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input MessageMetaUpdateWithWhereUniqueWithoutMessageInput {
  data: MessageMetaUpdateWithoutMessageDataInput!
  where: MessageMetaWhereUniqueInput!
}

input MessageMetaUpsertWithWhereUniqueWithoutMessageInput {
  create: MessageMetaCreateWithoutMessageInput!
  update: MessageMetaUpdateWithoutMessageDataInput!
  where: MessageMetaWhereUniqueInput!
}

input MessageMetaWhereUniqueInput {
  id: ID
}

input MessageUpdateInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: MessageMetaUpdateManyWithoutMessageInput
  itemName: String
  itemStatus: String
  itemType: String
  thread: ThreadUpdateOneRequiredWithoutMessagesInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMessageInput
}

input MessageUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input MessageUpdateManyWithoutThreadInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutThreadInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MutationUpdateOneThreadWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutThreadInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutThreadInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  data: MessageUpdateManyDataInput!
  where: MutationUpdateOneThreadWhereInput!
}

input MessageUpdateOneWithoutUserInput {
  connect: MessageWhereUniqueInput
  create: MessageCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: MessageUpdateWithoutUserDataInput
  upsert: MessageUpsertWithoutUserInput
}

input MessageUpdateWithoutThreadDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: MessageMetaUpdateManyWithoutMessageInput
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMessageInput
}

input MessageUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: MessageMetaUpdateManyWithoutMessageInput
  itemName: String
  itemStatus: String
  itemType: String
  thread: ThreadUpdateOneRequiredWithoutMessagesInput
  updatedAt: DateTime
}

input MessageUpdateWithWhereUniqueWithoutThreadInput {
  data: MessageUpdateWithoutThreadDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithoutUserInput {
  create: MessageCreateWithoutUserInput!
  update: MessageUpdateWithoutUserDataInput!
}

input MessageUpsertWithWhereUniqueWithoutThreadInput {
  create: MessageCreateWithoutThreadInput!
  update: MessageUpdateWithoutThreadDataInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createOneAnnotation(data: AnnotationCreateInput!): Annotation!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneFavorite(data: FavoriteCreateInput!): Favorite!
  createOneMessage(data: MessageCreateInput!): Message!
  createOneNotification(data: NotificationCreateInput!): Notification!
  createOnePod(data: PodCreateInput!): Pod!
  createOnePost(data: PostCreateInput!): Post!
  createOneQuestion(data: QuestionCreateInput!): Question!
  createOneReview(data: ReviewCreateInput!): Review!
  createOneTag(data: TagCreateInput!): Tag!
  createOneThread(data: ThreadCreateInput!): Thread!
  createOneUser(data: UserCreateInput!): User!
  updateOneAnnotation(data: AnnotationUpdateInput!, where: AnnotationWhereUniqueInput!): Annotation
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneFavorite(data: FavoriteUpdateInput!, where: FavoriteWhereUniqueInput!): Favorite
  updateOneMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateOneNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateOnePod(data: PodUpdateInput!, where: PodWhereUniqueInput!): Pod
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateOneReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneThread(data: ThreadUpdateInput!, where: ThreadWhereUniqueInput!): Thread
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input MutationUpdateOneAnnotationFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneAnnotationWhereInput {
  AND: [MutationUpdateOneAnnotationWhereInput!]
  createdAt: MutationUpdateOneAnnotationFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MutationUpdateOneAnnotationWhereInput!]
  OR: [MutationUpdateOneAnnotationWhereInput!]
  updatedAt: MutationUpdateOneAnnotationFilter
}

input MutationUpdateOneCategoryFilter {
  every: MutationUpdateOneCategoryWhereInput
  none: MutationUpdateOneCategoryWhereInput
  some: MutationUpdateOneCategoryWhereInput
}

input MutationUpdateOneCategoryWhereInput {
  AND: [MutationUpdateOneCategoryWhereInput!]
  categories: MutationUpdateOneCategoryFilter
  createdAt: MutationUpdateOneCategoryFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: MutationUpdateOneCategoryFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  members: MutationUpdateOneCategoryFilter
  NOT: [MutationUpdateOneCategoryWhereInput!]
  OR: [MutationUpdateOneCategoryWhereInput!]
  posts: MutationUpdateOneCategoryFilter
  updatedAt: MutationUpdateOneCategoryFilter
}

input MutationUpdateOneMessageFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneMessageWhereInput {
  AND: [MutationUpdateOneMessageWhereInput!]
  createdAt: MutationUpdateOneMessageFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MutationUpdateOneMessageWhereInput!]
  OR: [MutationUpdateOneMessageWhereInput!]
  updatedAt: MutationUpdateOneMessageFilter
}

input MutationUpdateOneNotificationFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneNotificationWhereInput {
  AND: [MutationUpdateOneNotificationWhereInput!]
  createdAt: MutationUpdateOneNotificationFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MutationUpdateOneNotificationWhereInput!]
  OR: [MutationUpdateOneNotificationWhereInput!]
  updatedAt: MutationUpdateOneNotificationFilter
}

input MutationUpdateOnePodFilter {
  every: MutationUpdateOnePodWhereInput
  none: MutationUpdateOnePodWhereInput
  some: MutationUpdateOnePodWhereInput
}

input MutationUpdateOnePodWhereInput {
  AND: [MutationUpdateOnePodWhereInput!]
  annotations: MutationUpdateOnePodFilter
  confirmHash: StringFilter
  createdAt: MutationUpdateOnePodFilter
  favorites: MutationUpdateOnePodFilter
  followers: MutationUpdateOnePodFilter
  following: MutationUpdateOnePodFilter
  forgotHash: StringFilter
  id: StringFilter
  memberOf: MutationUpdateOnePodFilter
  NOT: [MutationUpdateOnePodWhereInput!]
  notifications: MutationUpdateOnePodFilter
  OR: [MutationUpdateOnePodWhereInput!]
  pods: MutationUpdateOnePodFilter
  posts: MutationUpdateOnePodFilter
  privateHash: StringFilter
  publicHash: StringFilter
  questions: MutationUpdateOnePodFilter
  reviews: MutationUpdateOnePodFilter
  threads: MutationUpdateOnePodFilter
  updatedAt: MutationUpdateOnePodFilter
  userConfirmed: IntFilter
  userDeleted: BooleanFilter
  userEmail: StringFilter
  userMeta: MutationUpdateOnePodFilter
  userPassword: StringFilter
  userType: IntFilter
}

input MutationUpdateOnePostFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOnePostWhereInput {
  AND: [MutationUpdateOnePostWhereInput!]
  createdAt: MutationUpdateOnePostFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MutationUpdateOnePostWhereInput!]
  OR: [MutationUpdateOnePostWhereInput!]
  updatedAt: MutationUpdateOnePostFilter
}

input MutationUpdateOneQuestionFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneQuestionWhereInput {
  AND: [MutationUpdateOneQuestionWhereInput!]
  createdAt: MutationUpdateOneQuestionFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MutationUpdateOneQuestionWhereInput!]
  OR: [MutationUpdateOneQuestionWhereInput!]
  updatedAt: MutationUpdateOneQuestionFilter
}

input MutationUpdateOneReviewFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneReviewWhereInput {
  AND: [MutationUpdateOneReviewWhereInput!]
  createdAt: MutationUpdateOneReviewFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MutationUpdateOneReviewWhereInput!]
  OR: [MutationUpdateOneReviewWhereInput!]
  updatedAt: MutationUpdateOneReviewFilter
}

input MutationUpdateOneTagFilter {
  every: MutationUpdateOneTagWhereInput
  none: MutationUpdateOneTagWhereInput
  some: MutationUpdateOneTagWhereInput
}

input MutationUpdateOneTagWhereInput {
  AND: [MutationUpdateOneTagWhereInput!]
  annotations: MutationUpdateOneTagFilter
  createdAt: MutationUpdateOneTagFilter
  favorites: MutationUpdateOneTagFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: MutationUpdateOneTagFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [MutationUpdateOneTagWhereInput!]
  OR: [MutationUpdateOneTagWhereInput!]
  questions: MutationUpdateOneTagFilter
  reviews: MutationUpdateOneTagFilter
  tags: MutationUpdateOneTagFilter
  updatedAt: MutationUpdateOneTagFilter
}

input MutationUpdateOneThreadFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneThreadWhereInput {
  AND: [MutationUpdateOneThreadWhereInput!]
  createdAt: MutationUpdateOneThreadFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MutationUpdateOneThreadWhereInput!]
  OR: [MutationUpdateOneThreadWhereInput!]
  updatedAt: MutationUpdateOneThreadFilter
}

input MutationUpdateOneUserFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneUserWhereInput {
  AND: [MutationUpdateOneUserWhereInput!]
  createdAt: MutationUpdateOneUserFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [MutationUpdateOneUserWhereInput!]
  OR: [MutationUpdateOneUserWhereInput!]
  updatedAt: MutationUpdateOneUserFilter
}

type Notification {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [NotificationMeta!]
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: Pod
  post: Post
  receiver: User!
  sender: User!
}

input NotificationCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutPodInput
  post: PostCreateOneWithoutPostInput
  receiver: UserCreateOneWithoutReceiverInput!
  sender: UserCreateOneWithoutSenderInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput
}

input NotificationCreateManyWithoutNotificationsInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutUserInput!]
}

input NotificationCreateOneWithoutNotificationInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutPodInput
}

input NotificationCreateOneWithoutRecievedNotificationsInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutReceiverInput
}

input NotificationCreateOneWithoutSentNotificationsInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutSenderInput
}

input NotificationCreateWithoutPodInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  post: PostCreateOneWithoutPostInput
  receiver: UserCreateOneWithoutReceiverInput!
  sender: UserCreateOneWithoutSenderInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput
}

input NotificationCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutPodInput
  receiver: UserCreateOneWithoutReceiverInput!
  sender: UserCreateOneWithoutSenderInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput
}

input NotificationCreateWithoutReceiverInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutPodInput
  post: PostCreateOneWithoutPostInput
  sender: UserCreateOneWithoutSenderInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput
}

input NotificationCreateWithoutSenderInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutPodInput
  post: PostCreateOneWithoutPostInput
  receiver: UserCreateOneWithoutReceiverInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput
}

input NotificationCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: NotificationMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  pod: PodCreateOneWithoutPodInput
  post: PostCreateOneWithoutPostInput
  receiver: UserCreateOneWithoutReceiverInput!
  sender: UserCreateOneWithoutSenderInput!
  updatedAt: DateTime
}

type NotificationMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  notification: Notification!
}

input NotificationMetaCreateManyWithoutItemMetaInput {
  connect: [NotificationMetaWhereUniqueInput!]
  create: [NotificationMetaCreateWithoutNotificationInput!]
}

input NotificationMetaCreateWithoutNotificationInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input NotificationMetaUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input NotificationMetaUpdateManyWithoutNotificationInput {
  connect: [NotificationMetaWhereUniqueInput!]
  create: [NotificationMetaCreateWithoutNotificationInput!]
  delete: [NotificationMetaWhereUniqueInput!]
  deleteMany: [MutationUpdateOneNotificationWhereInput!]
  disconnect: [NotificationMetaWhereUniqueInput!]
  set: [NotificationMetaWhereUniqueInput!]
  update: [NotificationMetaUpdateWithWhereUniqueWithoutNotificationInput!]
  updateMany: [NotificationMetaUpdateManyWithWhereNestedInput!]
  upsert: [NotificationMetaUpsertWithWhereUniqueWithoutNotificationInput!]
}

input NotificationMetaUpdateManyWithWhereNestedInput {
  data: NotificationMetaUpdateManyDataInput!
  where: MutationUpdateOneNotificationWhereInput!
}

input NotificationMetaUpdateWithoutNotificationDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input NotificationMetaUpdateWithWhereUniqueWithoutNotificationInput {
  data: NotificationMetaUpdateWithoutNotificationDataInput!
  where: NotificationMetaWhereUniqueInput!
}

input NotificationMetaUpsertWithWhereUniqueWithoutNotificationInput {
  create: NotificationMetaCreateWithoutNotificationInput!
  update: NotificationMetaUpdateWithoutNotificationDataInput!
  where: NotificationMetaWhereUniqueInput!
}

input NotificationMetaWhereUniqueInput {
  id: ID
}

input NotificationUpdateInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationInput
  post: PostUpdateOneWithoutNotificationInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input NotificationUpdateManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutUserInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  data: NotificationUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input NotificationUpdateOneWithoutPodInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutPodInput
  delete: Boolean
  disconnect: Boolean
  update: NotificationUpdateWithoutPodDataInput
  upsert: NotificationUpsertWithoutPodInput
}

input NotificationUpdateOneWithoutPostInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutPostInput
  delete: Boolean
  disconnect: Boolean
  update: NotificationUpdateWithoutPostDataInput
  upsert: NotificationUpsertWithoutPostInput
}

input NotificationUpdateOneWithoutReceiverInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutReceiverInput
  delete: Boolean
  disconnect: Boolean
  update: NotificationUpdateWithoutReceiverDataInput
  upsert: NotificationUpsertWithoutReceiverInput
}

input NotificationUpdateOneWithoutSenderInput {
  connect: NotificationWhereUniqueInput
  create: NotificationCreateWithoutSenderInput
  delete: Boolean
  disconnect: Boolean
  update: NotificationUpdateWithoutSenderDataInput
  upsert: NotificationUpsertWithoutSenderInput
}

input NotificationUpdateWithoutPodDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  post: PostUpdateOneWithoutNotificationInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateWithoutReceiverDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationInput
  post: PostUpdateOneWithoutNotificationInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateWithoutSenderDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationInput
  post: PostUpdateOneWithoutNotificationInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  updatedAt: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: NotificationMetaUpdateManyWithoutNotificationInput
  itemName: String
  itemStatus: String
  itemType: String
  pod: PodUpdateOneWithoutNotificationInput
  post: PostUpdateOneWithoutNotificationInput
  receiver: UserUpdateOneRequiredWithoutRecievedNotificationsInput
  sender: UserUpdateOneRequiredWithoutSentNotificationsInput
  updatedAt: DateTime
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  data: NotificationUpdateWithoutUserDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithoutPodInput {
  create: NotificationCreateWithoutPodInput!
  update: NotificationUpdateWithoutPodDataInput!
}

input NotificationUpsertWithoutPostInput {
  create: NotificationCreateWithoutPostInput!
  update: NotificationUpdateWithoutPostDataInput!
}

input NotificationUpsertWithoutReceiverInput {
  create: NotificationCreateWithoutReceiverInput!
  update: NotificationUpdateWithoutReceiverDataInput!
}

input NotificationUpsertWithoutSenderInput {
  create: NotificationCreateWithoutSenderInput!
  update: NotificationUpdateWithoutSenderDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  update: NotificationUpdateWithoutUserDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereUniqueInput {
  id: ID
}

enum OrderByArg {
  asc
  desc
}

type Pod {
  categories(after: String, before: String, first: Int, last: Int, skip: Int): [Category!]
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [PodMeta!]
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
  user: User!
}

input PodCreateInput {
  categories: CategoryCreateManyWithoutCategoriesInput
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMembersInput
  notification: NotificationCreateOneWithoutNotificationInput
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PodCreateManyWithoutMemberOfInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutMembersInput!]
}

input PodCreateManyWithoutPodsInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutUserInput!]
}

input PodCreateOneWithoutPodInput {
  connect: PodWhereUniqueInput
  create: PodCreateWithoutPostsInput
}

input PodCreateWithoutCategoriesInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMembersInput
  notification: NotificationCreateOneWithoutNotificationInput
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PodCreateWithoutMembersInput {
  categories: CategoryCreateManyWithoutCategoriesInput
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notification: NotificationCreateOneWithoutNotificationInput
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PodCreateWithoutNotificationInput {
  categories: CategoryCreateManyWithoutCategoriesInput
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMembersInput
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PodCreateWithoutPostsInput {
  categories: CategoryCreateManyWithoutCategoriesInput
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMembersInput
  notification: NotificationCreateOneWithoutNotificationInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PodCreateWithoutUserInput {
  categories: CategoryCreateManyWithoutCategoriesInput
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PodMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  members: UserCreateManyWithoutMembersInput
  notification: NotificationCreateOneWithoutNotificationInput
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
}

type PodMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  pod: Pod!
}

input PodMetaCreateManyWithoutItemMetaInput {
  connect: [PodMetaWhereUniqueInput!]
  create: [PodMetaCreateWithoutPodInput!]
}

input PodMetaCreateWithoutPodInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input PodMetaUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input PodMetaUpdateManyWithoutPodInput {
  connect: [PodMetaWhereUniqueInput!]
  create: [PodMetaCreateWithoutPodInput!]
  delete: [PodMetaWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePodWhereInput!]
  disconnect: [PodMetaWhereUniqueInput!]
  set: [PodMetaWhereUniqueInput!]
  update: [PodMetaUpdateWithWhereUniqueWithoutPodInput!]
  updateMany: [PodMetaUpdateManyWithWhereNestedInput!]
  upsert: [PodMetaUpsertWithWhereUniqueWithoutPodInput!]
}

input PodMetaUpdateManyWithWhereNestedInput {
  data: PodMetaUpdateManyDataInput!
  where: MutationUpdateOnePodWhereInput!
}

input PodMetaUpdateWithoutPodDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input PodMetaUpdateWithWhereUniqueWithoutPodInput {
  data: PodMetaUpdateWithoutPodDataInput!
  where: PodMetaWhereUniqueInput!
}

input PodMetaUpsertWithWhereUniqueWithoutPodInput {
  create: PodMetaCreateWithoutPodInput!
  update: PodMetaUpdateWithoutPodDataInput!
  where: PodMetaWhereUniqueInput!
}

input PodMetaWhereUniqueInput {
  id: ID
}

input PodUpdateInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  notification: NotificationUpdateOneWithoutPodInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input PodUpdateManyWithoutCategoriesInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutCategoriesInput!]
  delete: [PodWhereUniqueInput!]
  deleteMany: [MutationUpdateOneCategoryWhereInput!]
  disconnect: [PodWhereUniqueInput!]
  set: [PodWhereUniqueInput!]
  update: [PodUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [PodUpdateManyWithWhereNestedInput!]
  upsert: [PodUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input PodUpdateManyWithoutMembersInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutMembersInput!]
  delete: [PodWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [PodWhereUniqueInput!]
  set: [PodWhereUniqueInput!]
  update: [PodUpdateWithWhereUniqueWithoutMembersInput!]
  updateMany: [PodUpdateManyWithWhereNestedInput!]
  upsert: [PodUpsertWithWhereUniqueWithoutMembersInput!]
}

input PodUpdateManyWithoutUserInput {
  connect: [PodWhereUniqueInput!]
  create: [PodCreateWithoutUserInput!]
  delete: [PodWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [PodWhereUniqueInput!]
  set: [PodWhereUniqueInput!]
  update: [PodUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PodUpdateManyWithWhereNestedInput!]
  upsert: [PodUpsertWithWhereUniqueWithoutUserInput!]
}

input PodUpdateManyWithWhereNestedInput {
  data: PodUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input PodUpdateOneRequiredWithoutPostsInput {
  connect: PodWhereUniqueInput
  create: PodCreateWithoutPostsInput
  update: PodUpdateWithoutPostsDataInput
  upsert: PodUpsertWithoutPostsInput
}

input PodUpdateOneWithoutNotificationInput {
  connect: PodWhereUniqueInput
  create: PodCreateWithoutNotificationInput
  delete: Boolean
  disconnect: Boolean
  update: PodUpdateWithoutNotificationDataInput
  upsert: PodUpsertWithoutNotificationInput
}

input PodUpdateWithoutCategoriesDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  notification: NotificationUpdateOneWithoutPodInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateWithoutMembersDataInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notification: NotificationUpdateOneWithoutPodInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateWithoutNotificationDataInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateWithoutPostsDataInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  notification: NotificationUpdateOneWithoutPodInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPodsInput
}

input PodUpdateWithoutUserDataInput {
  categories: CategoryUpdateManyWithoutPodsInput
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PodMetaUpdateManyWithoutPodInput
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  members: UserUpdateManyWithoutMemberOfInput
  notification: NotificationUpdateOneWithoutPodInput
  posts: PostUpdateManyWithoutPodInput
  updatedAt: DateTime
}

input PodUpdateWithWhereUniqueWithoutCategoriesInput {
  data: PodUpdateWithoutCategoriesDataInput!
  where: PodWhereUniqueInput!
}

input PodUpdateWithWhereUniqueWithoutMembersInput {
  data: PodUpdateWithoutMembersDataInput!
  where: PodWhereUniqueInput!
}

input PodUpdateWithWhereUniqueWithoutUserInput {
  data: PodUpdateWithoutUserDataInput!
  where: PodWhereUniqueInput!
}

input PodUpsertWithoutNotificationInput {
  create: PodCreateWithoutNotificationInput!
  update: PodUpdateWithoutNotificationDataInput!
}

input PodUpsertWithoutPostsInput {
  create: PodCreateWithoutPostsInput!
  update: PodUpdateWithoutPostsDataInput!
}

input PodUpsertWithWhereUniqueWithoutCategoriesInput {
  create: PodCreateWithoutCategoriesInput!
  update: PodUpdateWithoutCategoriesDataInput!
  where: PodWhereUniqueInput!
}

input PodUpsertWithWhereUniqueWithoutMembersInput {
  create: PodCreateWithoutMembersInput!
  update: PodUpdateWithoutMembersDataInput!
  where: PodWhereUniqueInput!
}

input PodUpsertWithWhereUniqueWithoutUserInput {
  create: PodCreateWithoutUserInput!
  update: PodUpdateWithoutUserDataInput!
  where: PodWhereUniqueInput!
}

input PodWhereUniqueInput {
  id: ID
}

type Post {
  annotations(after: String, before: String, first: Int, last: Int, skip: Int): [Annotation!]
  favorites(after: String, before: String, first: Int, last: Int, skip: Int): [Favorite!]
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [PostMeta!]
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  pod: Pod!
  questions(after: String, before: String, first: Int, last: Int, skip: Int): [Question!]
  reviews(after: String, before: String, first: Int, last: Int, skip: Int): [Review!]
  tags(after: String, before: String, first: Int, last: Int, skip: Int): [Tag!]
  user: User!
}

input PostCreateInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notification: NotificationCreateOneWithoutNotificationInput
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutUserInput!]
}

input PostCreateOneWithoutPostInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutFavoritesInput
}

input PostCreateWithoutAnnotationsInput {
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notification: NotificationCreateOneWithoutNotificationInput
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateWithoutFavoritesInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notification: NotificationCreateOneWithoutNotificationInput
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateWithoutNotificationInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateWithoutPodInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notification: NotificationCreateOneWithoutNotificationInput
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateWithoutQuestionsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notification: NotificationCreateOneWithoutNotificationInput
  pod: PodCreateOneWithoutPodInput!
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateWithoutReviewsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notification: NotificationCreateOneWithoutNotificationInput
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateWithoutTagsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notification: NotificationCreateOneWithoutNotificationInput
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PostCreateWithoutUserInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: PostMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  notification: NotificationCreateOneWithoutNotificationInput
  pod: PodCreateOneWithoutPodInput!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: TagCreateManyWithoutTagsInput
  updatedAt: DateTime
}

type PostMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  post: Post!
}

input PostMetaCreateManyWithoutItemMetaInput {
  connect: [PostMetaWhereUniqueInput!]
  create: [PostMetaCreateWithoutPostInput!]
}

input PostMetaCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input PostMetaUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input PostMetaUpdateManyWithoutPostInput {
  connect: [PostMetaWhereUniqueInput!]
  create: [PostMetaCreateWithoutPostInput!]
  delete: [PostMetaWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePostWhereInput!]
  disconnect: [PostMetaWhereUniqueInput!]
  set: [PostMetaWhereUniqueInput!]
  update: [PostMetaUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [PostMetaUpdateManyWithWhereNestedInput!]
  upsert: [PostMetaUpsertWithWhereUniqueWithoutPostInput!]
}

input PostMetaUpdateManyWithWhereNestedInput {
  data: PostMetaUpdateManyDataInput!
  where: MutationUpdateOnePostWhereInput!
}

input PostMetaUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input PostMetaUpdateWithWhereUniqueWithoutPostInput {
  data: PostMetaUpdateWithoutPostDataInput!
  where: PostMetaWhereUniqueInput!
}

input PostMetaUpsertWithWhereUniqueWithoutPostInput {
  create: PostMetaCreateWithoutPostInput!
  update: PostMetaUpdateWithoutPostDataInput!
  where: PostMetaWhereUniqueInput!
}

input PostMetaWhereUniqueInput {
  id: ID
}

input PostUpdateInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notification: NotificationUpdateOneWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input PostUpdateManyWithoutPodInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutPodInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePodWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPodInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPodInput!]
}

input PostUpdateManyWithoutTagsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutTagsInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [MutationUpdateOneTagWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTagsInput!]
}

input PostUpdateManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input PostUpdateOneRequiredWithoutAnnotationsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutAnnotationsInput
  update: PostUpdateWithoutAnnotationsDataInput
  upsert: PostUpsertWithoutAnnotationsInput
}

input PostUpdateOneRequiredWithoutFavoritesInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutFavoritesInput
  update: PostUpdateWithoutFavoritesDataInput
  upsert: PostUpsertWithoutFavoritesInput
}

input PostUpdateOneRequiredWithoutQuestionsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutQuestionsInput
  update: PostUpdateWithoutQuestionsDataInput
  upsert: PostUpsertWithoutQuestionsInput
}

input PostUpdateOneRequiredWithoutReviewsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutReviewsInput
  update: PostUpdateWithoutReviewsDataInput
  upsert: PostUpsertWithoutReviewsInput
}

input PostUpdateOneWithoutNotificationInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutNotificationInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutNotificationDataInput
  upsert: PostUpsertWithoutNotificationInput
}

input PostUpdateWithoutAnnotationsDataInput {
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notification: NotificationUpdateOneWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutFavoritesDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notification: NotificationUpdateOneWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutNotificationDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutPodDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notification: NotificationUpdateOneWithoutPostInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutQuestionsDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notification: NotificationUpdateOneWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutReviewsDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notification: NotificationUpdateOneWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutTagsDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notification: NotificationUpdateOneWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutUserDataInput {
  annotations: AnnotationUpdateManyWithoutPostInput
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutPostInput
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: PostMetaUpdateManyWithoutPostInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  notification: NotificationUpdateOneWithoutPostInput
  pod: PodUpdateOneRequiredWithoutPostsInput
  questions: QuestionUpdateManyWithoutPostInput
  reviews: ReviewUpdateManyWithoutPostInput
  tags: TagUpdateManyWithoutPostsInput
  updatedAt: DateTime
}

input PostUpdateWithWhereUniqueWithoutPodInput {
  data: PostUpdateWithoutPodDataInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutTagsInput {
  data: PostUpdateWithoutTagsDataInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  data: PostUpdateWithoutUserDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutAnnotationsInput {
  create: PostCreateWithoutAnnotationsInput!
  update: PostUpdateWithoutAnnotationsDataInput!
}

input PostUpsertWithoutFavoritesInput {
  create: PostCreateWithoutFavoritesInput!
  update: PostUpdateWithoutFavoritesDataInput!
}

input PostUpsertWithoutNotificationInput {
  create: PostCreateWithoutNotificationInput!
  update: PostUpdateWithoutNotificationDataInput!
}

input PostUpsertWithoutQuestionsInput {
  create: PostCreateWithoutQuestionsInput!
  update: PostUpdateWithoutQuestionsDataInput!
}

input PostUpsertWithoutReviewsInput {
  create: PostCreateWithoutReviewsInput!
  update: PostUpdateWithoutReviewsDataInput!
}

input PostUpsertWithWhereUniqueWithoutPodInput {
  create: PostCreateWithoutPodInput!
  update: PostUpdateWithoutPodDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutTagsInput {
  create: PostCreateWithoutTagsInput!
  update: PostUpdateWithoutTagsDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  create: PostCreateWithoutUserInput!
  update: PostUpdateWithoutUserDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  findManyAnnotation(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyAnnotationOrderByInput, skip: Int, where: QueryFindManyAnnotationWhereInput): [Annotation!]
  findManyAnnotationMeta(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyAnnotationMetaOrderByInput, skip: Int, where: QueryFindManyAnnotationMetaWhereInput): [AnnotationMeta!]
  findManyCategory(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyCategoryOrderByInput, skip: Int, where: QueryFindManyCategoryWhereInput): [Category!]
  findManyFavorite(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyFavoriteOrderByInput, skip: Int, where: QueryFindManyFavoriteWhereInput): [Favorite!]
  findManyMessage(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyMessageOrderByInput, skip: Int, where: QueryFindManyMessageWhereInput): [Message!]
  findManyMessageMeta(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyMessageMetaOrderByInput, skip: Int, where: QueryFindManyMessageMetaWhereInput): [MessageMeta!]
  findManyNotification(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyNotificationOrderByInput, skip: Int, where: QueryFindManyNotificationWhereInput): [Notification!]
  findManyNotificationMeta(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyNotificationMetaOrderByInput, skip: Int, where: QueryFindManyNotificationMetaWhereInput): [NotificationMeta!]
  findManyPod(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyPodOrderByInput, skip: Int, where: QueryFindManyPodWhereInput): [Pod!]
  findManyPodMeta(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyPodMetaOrderByInput, skip: Int, where: QueryFindManyPodMetaWhereInput): [PodMeta!]
  findManyPost(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyPostOrderByInput, skip: Int, where: QueryFindManyPostWhereInput): [Post!]
  findManyPostMeta(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyPostMetaOrderByInput, skip: Int, where: QueryFindManyPostMetaWhereInput): [PostMeta!]
  findManyQuestion(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyQuestionOrderByInput, skip: Int, where: QueryFindManyQuestionWhereInput): [Question!]
  findManyQuestionMeta(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyQuestionMetaOrderByInput, skip: Int, where: QueryFindManyQuestionMetaWhereInput): [QuestionMeta!]
  findManyReview(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyReviewOrderByInput, skip: Int, where: QueryFindManyReviewWhereInput): [Review!]
  findManyReviewMeta(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyReviewMetaOrderByInput, skip: Int, where: QueryFindManyReviewMetaWhereInput): [ReviewMeta!]
  findManyTag(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyTagOrderByInput, skip: Int, where: QueryFindManyTagWhereInput): [Tag!]
  findManyThread(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyThreadOrderByInput, skip: Int, where: QueryFindManyThreadWhereInput): [Thread!]
  findManyThreadMeta(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyThreadMetaOrderByInput, skip: Int, where: QueryFindManyThreadMetaWhereInput): [ThreadMeta!]
  findManyUser(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyUserOrderByInput, skip: Int, where: QueryFindManyUserWhereInput): [User!]
  findManyUserMeta(after: String, before: String, first: Int, last: Int, orderBy: QueryFindManyUserMetaOrderByInput, skip: Int, where: QueryFindManyUserMetaWhereInput): [UserMeta!]
  findOneAnnotation(where: AnnotationWhereUniqueInput!): Annotation
  findOneCategory(where: CategoryWhereUniqueInput!): Category
  findOneFavorite(where: FavoriteWhereUniqueInput!): Favorite
  findOneMessage(where: MessageWhereUniqueInput!): Message
  findOneNotification(where: NotificationWhereUniqueInput!): Notification
  findOnePod(where: PodWhereUniqueInput!): Pod
  findOnePost(where: PostWhereUniqueInput!): Post
  findOneQuestion(where: QuestionWhereUniqueInput!): Question
  findOneReview(where: ReviewWhereUniqueInput!): Review
  findOneTag(where: TagWhereUniqueInput!): Tag
  findOneThread(where: ThreadWhereUniqueInput!): Thread
  findOneUser(where: UserWhereUniqueInput!): User
}

input QueryFindManyAnnotationFilter {
  every: QueryFindManyAnnotationWhereInput
  none: QueryFindManyAnnotationWhereInput
  some: QueryFindManyAnnotationWhereInput
}

input QueryFindManyAnnotationMetaFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyAnnotationMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyAnnotationMetaWhereInput {
  AND: [QueryFindManyAnnotationMetaWhereInput!]
  annotation: QueryFindManyAnnotationMetaWhereInput
  createdAt: QueryFindManyAnnotationMetaFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QueryFindManyAnnotationMetaWhereInput!]
  OR: [QueryFindManyAnnotationMetaWhereInput!]
  updatedAt: QueryFindManyAnnotationMetaFilter
}

input QueryFindManyAnnotationOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemMimeType: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyAnnotationWhereInput {
  AND: [QueryFindManyAnnotationWhereInput!]
  createdAt: QueryFindManyAnnotationFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QueryFindManyAnnotationFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [QueryFindManyAnnotationWhereInput!]
  OR: [QueryFindManyAnnotationWhereInput!]
  post: QueryFindManyAnnotationWhereInput
  updatedAt: QueryFindManyAnnotationFilter
  user: QueryFindManyAnnotationWhereInput
}

input QueryFindManyCategoryFilter {
  every: QueryFindManyCategoryWhereInput
  none: QueryFindManyCategoryWhereInput
  some: QueryFindManyCategoryWhereInput
}

input QueryFindManyCategoryOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyCategoryWhereInput {
  AND: [QueryFindManyCategoryWhereInput!]
  createdAt: QueryFindManyCategoryFilter
  id: StringFilter
  itemContent: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [QueryFindManyCategoryWhereInput!]
  OR: [QueryFindManyCategoryWhereInput!]
  pods: QueryFindManyCategoryFilter
  updatedAt: QueryFindManyCategoryFilter
}

input QueryFindManyFavoriteFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyFavoriteOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyFavoriteWhereInput {
  AND: [QueryFindManyFavoriteWhereInput!]
  createdAt: QueryFindManyFavoriteFilter
  id: StringFilter
  itemContent: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [QueryFindManyFavoriteWhereInput!]
  OR: [QueryFindManyFavoriteWhereInput!]
  post: QueryFindManyFavoriteWhereInput
  updatedAt: QueryFindManyFavoriteFilter
  user: QueryFindManyFavoriteWhereInput
}

input QueryFindManyMessageFilter {
  every: QueryFindManyMessageWhereInput
  none: QueryFindManyMessageWhereInput
  some: QueryFindManyMessageWhereInput
}

input QueryFindManyMessageMetaFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyMessageMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyMessageMetaWhereInput {
  AND: [QueryFindManyMessageMetaWhereInput!]
  createdAt: QueryFindManyMessageMetaFilter
  id: StringFilter
  message: QueryFindManyMessageMetaWhereInput
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QueryFindManyMessageMetaWhereInput!]
  OR: [QueryFindManyMessageMetaWhereInput!]
  updatedAt: QueryFindManyMessageMetaFilter
}

input QueryFindManyMessageOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyMessageWhereInput {
  AND: [QueryFindManyMessageWhereInput!]
  createdAt: QueryFindManyMessageFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QueryFindManyMessageFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [QueryFindManyMessageWhereInput!]
  OR: [QueryFindManyMessageWhereInput!]
  thread: QueryFindManyMessageWhereInput
  updatedAt: QueryFindManyMessageFilter
  user: QueryFindManyMessageWhereInput
}

input QueryFindManyNotificationFilter {
  every: QueryFindManyNotificationWhereInput
  none: QueryFindManyNotificationWhereInput
  some: QueryFindManyNotificationWhereInput
}

input QueryFindManyNotificationMetaFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyNotificationMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyNotificationMetaWhereInput {
  AND: [QueryFindManyNotificationMetaWhereInput!]
  createdAt: QueryFindManyNotificationMetaFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QueryFindManyNotificationMetaWhereInput!]
  notification: QueryFindManyNotificationMetaWhereInput
  OR: [QueryFindManyNotificationMetaWhereInput!]
  updatedAt: QueryFindManyNotificationMetaFilter
}

input QueryFindManyNotificationOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyNotificationWhereInput {
  AND: [QueryFindManyNotificationWhereInput!]
  createdAt: QueryFindManyNotificationFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QueryFindManyNotificationFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [QueryFindManyNotificationWhereInput!]
  OR: [QueryFindManyNotificationWhereInput!]
  pod: QueryFindManyNotificationWhereInput
  post: QueryFindManyNotificationWhereInput
  receiver: QueryFindManyNotificationWhereInput
  sender: QueryFindManyNotificationWhereInput
  updatedAt: QueryFindManyNotificationFilter
  user: QueryFindManyNotificationWhereInput
}

input QueryFindManyPodFilter {
  every: QueryFindManyPodWhereInput
  none: QueryFindManyPodWhereInput
  some: QueryFindManyPodWhereInput
}

input QueryFindManyPodMetaFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyPodMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyPodMetaWhereInput {
  AND: [QueryFindManyPodMetaWhereInput!]
  createdAt: QueryFindManyPodMetaFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QueryFindManyPodMetaWhereInput!]
  OR: [QueryFindManyPodMetaWhereInput!]
  pod: QueryFindManyPodMetaWhereInput
  updatedAt: QueryFindManyPodMetaFilter
}

input QueryFindManyPodOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyPodWhereInput {
  AND: [QueryFindManyPodWhereInput!]
  categories: QueryFindManyPodFilter
  createdAt: QueryFindManyPodFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QueryFindManyPodFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  members: QueryFindManyPodFilter
  NOT: [QueryFindManyPodWhereInput!]
  notification: QueryFindManyPodWhereInput
  OR: [QueryFindManyPodWhereInput!]
  posts: QueryFindManyPodFilter
  updatedAt: QueryFindManyPodFilter
  user: QueryFindManyPodWhereInput
}

input QueryFindManyPostFilter {
  every: QueryFindManyPostWhereInput
  none: QueryFindManyPostWhereInput
  some: QueryFindManyPostWhereInput
}

input QueryFindManyPostMetaFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyPostMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyPostMetaWhereInput {
  AND: [QueryFindManyPostMetaWhereInput!]
  createdAt: QueryFindManyPostMetaFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QueryFindManyPostMetaWhereInput!]
  OR: [QueryFindManyPostMetaWhereInput!]
  post: QueryFindManyPostMetaWhereInput
  updatedAt: QueryFindManyPostMetaFilter
}

input QueryFindManyPostOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemMimeType: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyPostWhereInput {
  AND: [QueryFindManyPostWhereInput!]
  annotations: QueryFindManyPostFilter
  createdAt: QueryFindManyPostFilter
  favorites: QueryFindManyPostFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QueryFindManyPostFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [QueryFindManyPostWhereInput!]
  notification: QueryFindManyPostWhereInput
  OR: [QueryFindManyPostWhereInput!]
  pod: QueryFindManyPostWhereInput
  questions: QueryFindManyPostFilter
  reviews: QueryFindManyPostFilter
  tags: QueryFindManyPostFilter
  updatedAt: QueryFindManyPostFilter
  user: QueryFindManyPostWhereInput
}

input QueryFindManyQuestionFilter {
  every: QueryFindManyQuestionWhereInput
  none: QueryFindManyQuestionWhereInput
  some: QueryFindManyQuestionWhereInput
}

input QueryFindManyQuestionMetaFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyQuestionMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyQuestionMetaWhereInput {
  AND: [QueryFindManyQuestionMetaWhereInput!]
  createdAt: QueryFindManyQuestionMetaFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QueryFindManyQuestionMetaWhereInput!]
  OR: [QueryFindManyQuestionMetaWhereInput!]
  question: QueryFindManyQuestionMetaWhereInput
  updatedAt: QueryFindManyQuestionMetaFilter
}

input QueryFindManyQuestionOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemMimeType: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyQuestionWhereInput {
  AND: [QueryFindManyQuestionWhereInput!]
  createdAt: QueryFindManyQuestionFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QueryFindManyQuestionFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [QueryFindManyQuestionWhereInput!]
  OR: [QueryFindManyQuestionWhereInput!]
  post: QueryFindManyQuestionWhereInput
  updatedAt: QueryFindManyQuestionFilter
  user: QueryFindManyQuestionWhereInput
}

input QueryFindManyReviewFilter {
  every: QueryFindManyReviewWhereInput
  none: QueryFindManyReviewWhereInput
  some: QueryFindManyReviewWhereInput
}

input QueryFindManyReviewMetaFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyReviewMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyReviewMetaWhereInput {
  AND: [QueryFindManyReviewMetaWhereInput!]
  createdAt: QueryFindManyReviewMetaFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QueryFindManyReviewMetaWhereInput!]
  OR: [QueryFindManyReviewMetaWhereInput!]
  review: QueryFindManyReviewMetaWhereInput
  updatedAt: QueryFindManyReviewMetaFilter
}

input QueryFindManyReviewOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemMimeType: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  itemUrlSegment: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyReviewWhereInput {
  AND: [QueryFindManyReviewWhereInput!]
  createdAt: QueryFindManyReviewFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QueryFindManyReviewFilter
  itemMimeType: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  itemUrlSegment: StringFilter
  NOT: [QueryFindManyReviewWhereInput!]
  OR: [QueryFindManyReviewWhereInput!]
  post: QueryFindManyReviewWhereInput
  updatedAt: QueryFindManyReviewFilter
  user: QueryFindManyReviewWhereInput
}

input QueryFindManyTagFilter {
  every: QueryFindManyTagWhereInput
  none: QueryFindManyTagWhereInput
  some: QueryFindManyTagWhereInput
}

input QueryFindManyTagOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyTagWhereInput {
  AND: [QueryFindManyTagWhereInput!]
  createdAt: QueryFindManyTagFilter
  id: StringFilter
  itemContent: StringFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  NOT: [QueryFindManyTagWhereInput!]
  OR: [QueryFindManyTagWhereInput!]
  posts: QueryFindManyTagFilter
  updatedAt: QueryFindManyTagFilter
}

input QueryFindManyThreadFilter {
  every: QueryFindManyThreadWhereInput
  none: QueryFindManyThreadWhereInput
  some: QueryFindManyThreadWhereInput
}

input QueryFindManyThreadMetaFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyThreadMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyThreadMetaWhereInput {
  AND: [QueryFindManyThreadMetaWhereInput!]
  createdAt: QueryFindManyThreadMetaFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QueryFindManyThreadMetaWhereInput!]
  OR: [QueryFindManyThreadMetaWhereInput!]
  thread: QueryFindManyThreadMetaWhereInput
  updatedAt: QueryFindManyThreadMetaFilter
}

input QueryFindManyThreadOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  itemContent: OrderByArg
  itemDeleted: OrderByArg
  itemName: OrderByArg
  itemStatus: OrderByArg
  itemType: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyThreadWhereInput {
  AND: [QueryFindManyThreadWhereInput!]
  createdAt: QueryFindManyThreadFilter
  id: StringFilter
  itemContent: StringFilter
  itemDeleted: BooleanFilter
  itemMeta: QueryFindManyThreadFilter
  itemName: StringFilter
  itemStatus: StringFilter
  itemType: StringFilter
  messages: QueryFindManyThreadFilter
  NOT: [QueryFindManyThreadWhereInput!]
  OR: [QueryFindManyThreadWhereInput!]
  updatedAt: QueryFindManyThreadFilter
  user: QueryFindManyThreadWhereInput
}

input QueryFindManyUserFilter {
  every: QueryFindManyUserWhereInput
  none: QueryFindManyUserWhereInput
  some: QueryFindManyUserWhereInput
}

input QueryFindManyUserMetaFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input QueryFindManyUserMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
}

input QueryFindManyUserMetaWhereInput {
  AND: [QueryFindManyUserMetaWhereInput!]
  createdAt: QueryFindManyUserMetaFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [QueryFindManyUserMetaWhereInput!]
  OR: [QueryFindManyUserMetaWhereInput!]
  updatedAt: QueryFindManyUserMetaFilter
  user: QueryFindManyUserMetaWhereInput
}

input QueryFindManyUserOrderByInput {
  confirmHash: OrderByArg
  createdAt: OrderByArg
  forgotHash: OrderByArg
  id: OrderByArg
  privateHash: OrderByArg
  publicHash: OrderByArg
  updatedAt: OrderByArg
  userConfirmed: OrderByArg
  userDeleted: OrderByArg
  userEmail: OrderByArg
  userPassword: OrderByArg
  userType: OrderByArg
}

input QueryFindManyUserWhereInput {
  AND: [QueryFindManyUserWhereInput!]
  annotations: QueryFindManyUserFilter
  confirmHash: StringFilter
  createdAt: QueryFindManyUserFilter
  favorites: QueryFindManyUserFilter
  followers: QueryFindManyUserFilter
  following: QueryFindManyUserFilter
  forgotHash: StringFilter
  id: StringFilter
  memberOf: QueryFindManyUserFilter
  message: QueryFindManyUserWhereInput
  NOT: [QueryFindManyUserWhereInput!]
  notifications: QueryFindManyUserFilter
  OR: [QueryFindManyUserWhereInput!]
  pods: QueryFindManyUserFilter
  posts: QueryFindManyUserFilter
  privateHash: StringFilter
  publicHash: StringFilter
  questions: QueryFindManyUserFilter
  recievedNotifications: QueryFindManyUserWhereInput
  reviews: QueryFindManyUserFilter
  sentNotifications: QueryFindManyUserWhereInput
  threads: QueryFindManyUserFilter
  updatedAt: QueryFindManyUserFilter
  userConfirmed: IntFilter
  userDeleted: BooleanFilter
  userEmail: StringFilter
  userMeta: QueryFindManyUserFilter
  userPassword: StringFilter
  userType: IntFilter
}

type Question {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [QuestionMeta!]
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: Post!
  user: User!
}

input QuestionCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: QuestionMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input QuestionCreateManyWithoutQuestionsInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutPostInput!]
}

input QuestionCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: QuestionMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input QuestionCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: QuestionMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
}

type QuestionMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  question: Question!
}

input QuestionMetaCreateManyWithoutItemMetaInput {
  connect: [QuestionMetaWhereUniqueInput!]
  create: [QuestionMetaCreateWithoutQuestionInput!]
}

input QuestionMetaCreateWithoutQuestionInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input QuestionMetaUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input QuestionMetaUpdateManyWithoutQuestionInput {
  connect: [QuestionMetaWhereUniqueInput!]
  create: [QuestionMetaCreateWithoutQuestionInput!]
  delete: [QuestionMetaWhereUniqueInput!]
  deleteMany: [MutationUpdateOneQuestionWhereInput!]
  disconnect: [QuestionMetaWhereUniqueInput!]
  set: [QuestionMetaWhereUniqueInput!]
  update: [QuestionMetaUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [QuestionMetaUpdateManyWithWhereNestedInput!]
  upsert: [QuestionMetaUpsertWithWhereUniqueWithoutQuestionInput!]
}

input QuestionMetaUpdateManyWithWhereNestedInput {
  data: QuestionMetaUpdateManyDataInput!
  where: MutationUpdateOneQuestionWhereInput!
}

input QuestionMetaUpdateWithoutQuestionDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input QuestionMetaUpdateWithWhereUniqueWithoutQuestionInput {
  data: QuestionMetaUpdateWithoutQuestionDataInput!
  where: QuestionMetaWhereUniqueInput!
}

input QuestionMetaUpsertWithWhereUniqueWithoutQuestionInput {
  create: QuestionMetaCreateWithoutQuestionInput!
  update: QuestionMetaUpdateWithoutQuestionDataInput!
  where: QuestionMetaWhereUniqueInput!
}

input QuestionMetaWhereUniqueInput {
  id: ID
}

input QuestionUpdateInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: QuestionMetaUpdateManyWithoutQuestionInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutQuestionsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutQuestionsInput
}

input QuestionUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input QuestionUpdateManyWithoutPostInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutPostInput!]
  delete: [QuestionWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePostWhereInput!]
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutPostInput!]
}

input QuestionUpdateManyWithoutUserInput {
  connect: [QuestionWhereUniqueInput!]
  create: [QuestionCreateWithoutUserInput!]
  delete: [QuestionWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUserInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  data: QuestionUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input QuestionUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: QuestionMetaUpdateManyWithoutQuestionInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutQuestionsInput
}

input QuestionUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: QuestionMetaUpdateManyWithoutQuestionInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutQuestionsInput
  updatedAt: DateTime
}

input QuestionUpdateWithWhereUniqueWithoutPostInput {
  data: QuestionUpdateWithoutPostDataInput!
  where: QuestionWhereUniqueInput!
}

input QuestionUpdateWithWhereUniqueWithoutUserInput {
  data: QuestionUpdateWithoutUserDataInput!
  where: QuestionWhereUniqueInput!
}

input QuestionUpsertWithWhereUniqueWithoutPostInput {
  create: QuestionCreateWithoutPostInput!
  update: QuestionUpdateWithoutPostDataInput!
  where: QuestionWhereUniqueInput!
}

input QuestionUpsertWithWhereUniqueWithoutUserInput {
  create: QuestionCreateWithoutUserInput!
  update: QuestionUpdateWithoutUserDataInput!
  where: QuestionWhereUniqueInput!
}

input QuestionWhereUniqueInput {
  id: ID
}

type Review {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [ReviewMeta!]
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: Post!
  user: User!
}

input ReviewCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ReviewMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input ReviewCreateManyWithoutReviewsInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutPostInput!]
}

input ReviewCreateWithoutPostInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ReviewMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input ReviewCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ReviewMetaCreateManyWithoutItemMetaInput
  itemMimeType: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  itemUrlSegment: String!
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
}

type ReviewMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  review: Review!
}

input ReviewMetaCreateManyWithoutItemMetaInput {
  connect: [ReviewMetaWhereUniqueInput!]
  create: [ReviewMetaCreateWithoutReviewInput!]
}

input ReviewMetaCreateWithoutReviewInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input ReviewMetaUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input ReviewMetaUpdateManyWithoutReviewInput {
  connect: [ReviewMetaWhereUniqueInput!]
  create: [ReviewMetaCreateWithoutReviewInput!]
  delete: [ReviewMetaWhereUniqueInput!]
  deleteMany: [MutationUpdateOneReviewWhereInput!]
  disconnect: [ReviewMetaWhereUniqueInput!]
  set: [ReviewMetaWhereUniqueInput!]
  update: [ReviewMetaUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [ReviewMetaUpdateManyWithWhereNestedInput!]
  upsert: [ReviewMetaUpsertWithWhereUniqueWithoutReviewInput!]
}

input ReviewMetaUpdateManyWithWhereNestedInput {
  data: ReviewMetaUpdateManyDataInput!
  where: MutationUpdateOneReviewWhereInput!
}

input ReviewMetaUpdateWithoutReviewDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input ReviewMetaUpdateWithWhereUniqueWithoutReviewInput {
  data: ReviewMetaUpdateWithoutReviewDataInput!
  where: ReviewMetaWhereUniqueInput!
}

input ReviewMetaUpsertWithWhereUniqueWithoutReviewInput {
  create: ReviewMetaCreateWithoutReviewInput!
  update: ReviewMetaUpdateWithoutReviewDataInput!
  where: ReviewMetaWhereUniqueInput!
}

input ReviewMetaWhereUniqueInput {
  id: ID
}

input ReviewUpdateInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ReviewMetaUpdateManyWithoutReviewInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutReviewsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
}

input ReviewUpdateManyWithoutPostInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutPostInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePostWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutPostInput!]
}

input ReviewUpdateManyWithoutUserInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutUserInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  data: ReviewUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input ReviewUpdateWithoutPostDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ReviewMetaUpdateManyWithoutReviewInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ReviewMetaUpdateManyWithoutReviewInput
  itemMimeType: String
  itemName: String
  itemStatus: String
  itemType: String
  itemUrlSegment: String
  post: PostUpdateOneRequiredWithoutReviewsInput
  updatedAt: DateTime
}

input ReviewUpdateWithWhereUniqueWithoutPostInput {
  data: ReviewUpdateWithoutPostDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  data: ReviewUpdateWithoutUserDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutPostInput {
  create: ReviewCreateWithoutPostInput!
  update: ReviewUpdateWithoutPostDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  update: ReviewUpdateWithoutUserDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereUniqueInput {
  id: ID
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Tag {
  id: ID!
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
}

input TagCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
}

input TagCreateManyWithoutTagsInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostsInput!]
}

input TagCreateWithoutPostsInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
}

input TagUpdateInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  posts: PostUpdateManyWithoutTagsInput
  updatedAt: DateTime
}

input TagUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input TagUpdateManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePostWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostsInput!]
}

input TagUpdateManyWithWhereNestedInput {
  data: TagUpdateManyDataInput!
  where: MutationUpdateOnePostWhereInput!
}

input TagUpdateWithoutPostsDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input TagUpdateWithWhereUniqueWithoutPostsInput {
  data: TagUpdateWithoutPostsDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutPostsInput {
  create: TagCreateWithoutPostsInput!
  update: TagUpdateWithoutPostsDataInput!
  where: TagWhereUniqueInput!
}

input TagWhereUniqueInput {
  id: ID
}

type Thread {
  id: ID!
  itemContent: String!
  itemDeleted: Boolean!
  itemMeta(after: String, before: String, first: Int, last: Int, skip: Int): [ThreadMeta!]
  itemName: String!
  itemStatus: String!
  itemType: String!
  messages(after: String, before: String, first: Int, last: Int, skip: Int): [Message!]
  user: User!
}

input ThreadCreateInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ThreadMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  messages: MessageCreateManyWithoutMessagesInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input ThreadCreateManyWithoutThreadsInput {
  connect: [ThreadWhereUniqueInput!]
  create: [ThreadCreateWithoutUserInput!]
}

input ThreadCreateOneWithoutThreadInput {
  connect: ThreadWhereUniqueInput
  create: ThreadCreateWithoutMessagesInput
}

input ThreadCreateWithoutMessagesInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ThreadMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input ThreadCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  itemContent: String!
  itemDeleted: Boolean
  itemMeta: ThreadMetaCreateManyWithoutItemMetaInput
  itemName: String!
  itemStatus: String!
  itemType: String!
  messages: MessageCreateManyWithoutMessagesInput
  updatedAt: DateTime
}

type ThreadMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  thread: Thread!
}

input ThreadMetaCreateManyWithoutItemMetaInput {
  connect: [ThreadMetaWhereUniqueInput!]
  create: [ThreadMetaCreateWithoutThreadInput!]
}

input ThreadMetaCreateWithoutThreadInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input ThreadMetaUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input ThreadMetaUpdateManyWithoutThreadInput {
  connect: [ThreadMetaWhereUniqueInput!]
  create: [ThreadMetaCreateWithoutThreadInput!]
  delete: [ThreadMetaWhereUniqueInput!]
  deleteMany: [MutationUpdateOneThreadWhereInput!]
  disconnect: [ThreadMetaWhereUniqueInput!]
  set: [ThreadMetaWhereUniqueInput!]
  update: [ThreadMetaUpdateWithWhereUniqueWithoutThreadInput!]
  updateMany: [ThreadMetaUpdateManyWithWhereNestedInput!]
  upsert: [ThreadMetaUpsertWithWhereUniqueWithoutThreadInput!]
}

input ThreadMetaUpdateManyWithWhereNestedInput {
  data: ThreadMetaUpdateManyDataInput!
  where: MutationUpdateOneThreadWhereInput!
}

input ThreadMetaUpdateWithoutThreadDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input ThreadMetaUpdateWithWhereUniqueWithoutThreadInput {
  data: ThreadMetaUpdateWithoutThreadDataInput!
  where: ThreadMetaWhereUniqueInput!
}

input ThreadMetaUpsertWithWhereUniqueWithoutThreadInput {
  create: ThreadMetaCreateWithoutThreadInput!
  update: ThreadMetaUpdateWithoutThreadDataInput!
  where: ThreadMetaWhereUniqueInput!
}

input ThreadMetaWhereUniqueInput {
  id: ID
}

input ThreadUpdateInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ThreadMetaUpdateManyWithoutThreadInput
  itemName: String
  itemStatus: String
  itemType: String
  messages: MessageUpdateManyWithoutThreadInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutThreadsInput
}

input ThreadUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
}

input ThreadUpdateManyWithoutUserInput {
  connect: [ThreadWhereUniqueInput!]
  create: [ThreadCreateWithoutUserInput!]
  delete: [ThreadWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [ThreadWhereUniqueInput!]
  set: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ThreadUpdateManyWithWhereNestedInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutUserInput!]
}

input ThreadUpdateManyWithWhereNestedInput {
  data: ThreadUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input ThreadUpdateOneRequiredWithoutMessagesInput {
  connect: ThreadWhereUniqueInput
  create: ThreadCreateWithoutMessagesInput
  update: ThreadUpdateWithoutMessagesDataInput
  upsert: ThreadUpsertWithoutMessagesInput
}

input ThreadUpdateWithoutMessagesDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ThreadMetaUpdateManyWithoutThreadInput
  itemName: String
  itemStatus: String
  itemType: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutThreadsInput
}

input ThreadUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  itemContent: String
  itemDeleted: Boolean
  itemMeta: ThreadMetaUpdateManyWithoutThreadInput
  itemName: String
  itemStatus: String
  itemType: String
  messages: MessageUpdateManyWithoutThreadInput
  updatedAt: DateTime
}

input ThreadUpdateWithWhereUniqueWithoutUserInput {
  data: ThreadUpdateWithoutUserDataInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpsertWithoutMessagesInput {
  create: ThreadCreateWithoutMessagesInput!
  update: ThreadUpdateWithoutMessagesDataInput!
}

input ThreadUpsertWithWhereUniqueWithoutUserInput {
  create: ThreadCreateWithoutUserInput!
  update: ThreadUpdateWithoutUserDataInput!
  where: ThreadWhereUniqueInput!
}

input ThreadWhereUniqueInput {
  id: ID
}

type User {
  annotations(after: String, before: String, first: Int, last: Int, skip: Int): [Annotation!]
  confirmHash: String!
  favorites(after: String, before: String, first: Int, last: Int, skip: Int): [Favorite!]
  followers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  following(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  forgotHash: String!
  id: ID!
  memberOf(after: String, before: String, first: Int, last: Int, skip: Int): [Pod!]
  memberOfPosts(postId: String, userId: ID): [Post!]
  notifications(after: String, before: String, first: Int, last: Int, skip: Int): [Notification!]
  pods(after: String, before: String, first: Int, last: Int, skip: Int): [Pod!]
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
  privateHash: String!
  publicHash: String!
  questions(after: String, before: String, first: Int, last: Int, skip: Int): [Question!]
  reviews(after: String, before: String, first: Int, last: Int, skip: Int): [Review!]
  threads(after: String, before: String, first: Int, last: Int, skip: Int): [Thread!]
  userConfirmed: Int!
  userDeleted: Boolean!
  userEmail: String!
  userMeta(after: String, before: String, first: Int, last: Int, skip: Int): [UserMeta!]
  userType: Int!
}

input UserCreateInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateManyWithoutMembersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutMemberOfInput!]
}

input UserCreateOneWithoutReceiverInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecievedNotificationsInput
}

input UserCreateOneWithoutSenderInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSentNotificationsInput
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPodsInput
}

input UserCreateWithoutAnnotationsInput {
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutFavoritesInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutFollowersInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutFollowingInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutMemberOfInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutMessageInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutNotificationsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutPodsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutPostsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutQuestionsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutRecievedNotificationsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutReviewsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutSentNotificationsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  threads: ThreadCreateManyWithoutThreadsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutThreadsInput {
  annotations: AnnotationCreateManyWithoutAnnotationsInput
  confirmHash: String!
  createdAt: DateTime
  favorites: FavoriteCreateManyWithoutFavoritesInput
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: ID
  memberOf: PodCreateManyWithoutMemberOfInput
  message: MessageCreateOneWithoutMessageInput
  notifications: NotificationCreateManyWithoutNotificationsInput
  pods: PodCreateManyWithoutPodsInput
  posts: PostCreateManyWithoutPostsInput
  privateHash: String!
  publicHash: String!
  questions: QuestionCreateManyWithoutQuestionsInput
  recievedNotifications: NotificationCreateOneWithoutRecievedNotificationsInput
  reviews: ReviewCreateManyWithoutReviewsInput
  sentNotifications: NotificationCreateOneWithoutSentNotificationsInput
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserMetaInput
  userPassword: String!
  userType: Int!
}

type UserMeta {
  id: ID!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  user: User!
}

input UserMetaCreateManyWithoutUserMetaInput {
  connect: [UserMetaWhereUniqueInput!]
  create: [UserMetaCreateWithoutUserInput!]
}

input UserMetaCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input UserMetaUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input UserMetaUpdateManyWithoutUserInput {
  connect: [UserMetaWhereUniqueInput!]
  create: [UserMetaCreateWithoutUserInput!]
  delete: [UserMetaWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [UserMetaWhereUniqueInput!]
  set: [UserMetaWhereUniqueInput!]
  update: [UserMetaUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserMetaUpdateManyWithWhereNestedInput!]
  upsert: [UserMetaUpsertWithWhereUniqueWithoutUserInput!]
}

input UserMetaUpdateManyWithWhereNestedInput {
  data: UserMetaUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input UserMetaUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  metaDeleted: Boolean
  metaName: String
  metaType: String
  metaValue: String
  updatedAt: DateTime
}

input UserMetaUpdateWithWhereUniqueWithoutUserInput {
  data: UserMetaUpdateWithoutUserDataInput!
  where: UserMetaWhereUniqueInput!
}

input UserMetaUpsertWithWhereUniqueWithoutUserInput {
  create: UserMetaCreateWithoutUserInput!
  update: UserMetaUpdateWithoutUserDataInput!
  where: UserMetaWhereUniqueInput!
}

input UserMetaWhereUniqueInput {
  id: ID
}

input UserUpdateInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateManyDataInput {
  confirmHash: String
  createdAt: DateTime
  forgotHash: String
  id: ID
  privateHash: String
  publicHash: String
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userPassword: String
  userType: Int
}

input UserUpdateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithoutMemberOfInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutMemberOfInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [MutationUpdateOnePodWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMemberOfInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMemberOfInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input UserUpdateOneRequiredWithoutAnnotationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAnnotationsInput
  update: UserUpdateWithoutAnnotationsDataInput
  upsert: UserUpsertWithoutAnnotationsInput
}

input UserUpdateOneRequiredWithoutFavoritesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFavoritesInput
  update: UserUpdateWithoutFavoritesDataInput
  upsert: UserUpsertWithoutFavoritesInput
}

input UserUpdateOneRequiredWithoutMessageInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMessageInput
  update: UserUpdateWithoutMessageDataInput
  upsert: UserUpsertWithoutMessageInput
}

input UserUpdateOneRequiredWithoutPodsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPodsInput
  update: UserUpdateWithoutPodsDataInput
  upsert: UserUpsertWithoutPodsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutQuestionsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutQuestionsInput
  update: UserUpdateWithoutQuestionsDataInput
  upsert: UserUpsertWithoutQuestionsInput
}

input UserUpdateOneRequiredWithoutRecievedNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecievedNotificationsInput
  update: UserUpdateWithoutRecievedNotificationsDataInput
  upsert: UserUpsertWithoutRecievedNotificationsInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewsInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneRequiredWithoutSentNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSentNotificationsInput
  update: UserUpdateWithoutSentNotificationsDataInput
  upsert: UserUpsertWithoutSentNotificationsInput
}

input UserUpdateOneRequiredWithoutThreadsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutThreadsInput
  update: UserUpdateWithoutThreadsDataInput
  upsert: UserUpsertWithoutThreadsInput
}

input UserUpdateOneWithoutNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutNotificationsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateWithoutAnnotationsDataInput {
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutFavoritesDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutFollowersDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutFollowingDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutMemberOfDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutMessageDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutNotificationsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutPodsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutPostsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutQuestionsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutRecievedNotificationsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutReviewsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutSentNotificationsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutUserInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithoutThreadsDataInput {
  annotations: AnnotationUpdateManyWithoutUserInput
  confirmHash: String
  createdAt: DateTime
  favorites: FavoriteUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  forgotHash: String
  id: ID
  memberOf: PodUpdateManyWithoutMembersInput
  message: MessageUpdateOneWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
  pods: PodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  privateHash: String
  publicHash: String
  questions: QuestionUpdateManyWithoutUserInput
  recievedNotifications: NotificationUpdateOneWithoutReceiverInput
  reviews: ReviewUpdateManyWithoutUserInput
  sentNotifications: NotificationUpdateOneWithoutSenderInput
  updatedAt: DateTime
  userConfirmed: Int
  userDeleted: Boolean
  userEmail: String
  userMeta: UserMetaUpdateManyWithoutUserInput
  userPassword: String
  userType: Int
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  data: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutMemberOfInput {
  data: UserUpdateWithoutMemberOfDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAnnotationsInput {
  create: UserCreateWithoutAnnotationsInput!
  update: UserUpdateWithoutAnnotationsDataInput!
}

input UserUpsertWithoutFavoritesInput {
  create: UserCreateWithoutFavoritesInput!
  update: UserUpdateWithoutFavoritesDataInput!
}

input UserUpsertWithoutMessageInput {
  create: UserCreateWithoutMessageInput!
  update: UserUpdateWithoutMessageDataInput!
}

input UserUpsertWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  update: UserUpdateWithoutNotificationsDataInput!
}

input UserUpsertWithoutPodsInput {
  create: UserCreateWithoutPodsInput!
  update: UserUpdateWithoutPodsDataInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput!
  update: UserUpdateWithoutQuestionsDataInput!
}

input UserUpsertWithoutRecievedNotificationsInput {
  create: UserCreateWithoutRecievedNotificationsInput!
  update: UserUpdateWithoutRecievedNotificationsDataInput!
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsDataInput!
}

input UserUpsertWithoutSentNotificationsInput {
  create: UserCreateWithoutSentNotificationsInput!
  update: UserUpdateWithoutSentNotificationsDataInput!
}

input UserUpsertWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput!
  update: UserUpdateWithoutThreadsDataInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  update: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutMemberOfInput {
  create: UserCreateWithoutMemberOfInput!
  update: UserUpdateWithoutMemberOfDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereUniqueInput {
  confirmHash: String
  forgotHash: String
  id: ID
  privateHash: String
  publicHash: String
  userEmail: String
}

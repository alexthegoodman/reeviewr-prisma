### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
}

enum OrderByArg {
  asc
  desc
}

type Query {
  user(where: UserWhereUniqueInput!): User
  userMetas(after: UserMetaWhereUniqueInput, before: UserMetaWhereUniqueInput, first: Int, last: Int, orderBy: UserMetaOrderByInput, skip: Int, where: UserMetaWhereInput): [UserMeta!]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  confirmHash: String!
  forgotHash: String!
  id: String!
  privateHash: String!
  publicHash: String!
  userConfirmed: Int!
  userDeleted: Boolean!
  userEmail: String!
  userType: Int!
}

input UserCreateInput {
  confirmHash: String!
  createdAt: DateTime
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  privateHash: String!
  publicHash: String!
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateWithoutFollowersInput {
  confirmHash: String!
  createdAt: DateTime
  following: UserCreateManyWithoutFollowersInput
  forgotHash: String!
  id: String
  privateHash: String!
  publicHash: String!
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserCreateWithoutFollowingInput {
  confirmHash: String!
  createdAt: DateTime
  followers: UserCreateManyWithoutFollowingInput
  forgotHash: String!
  id: String
  privateHash: String!
  publicHash: String!
  updatedAt: DateTime
  userConfirmed: Int!
  userDeleted: Boolean
  userEmail: String!
  userMeta: UserMetaCreateManyWithoutUserInput
  userPassword: String!
  userType: Int!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMeta {
  id: String!
  metaDeleted: Boolean!
  metaName: String!
  metaType: String!
  metaValue: String!
  user: User!
}

input UserMetaCreateManyWithoutUserInput {
  connect: [UserMetaWhereUniqueInput!]
  create: [UserMetaCreateWithoutUserInput!]
}

input UserMetaCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  metaDeleted: Boolean
  metaName: String!
  metaType: String!
  metaValue: String!
  updatedAt: DateTime
}

input UserMetaFilter {
  every: UserMetaWhereInput
  none: UserMetaWhereInput
  some: UserMetaWhereInput
}

input UserMetaOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  metaDeleted: OrderByArg
  metaName: OrderByArg
  metaType: OrderByArg
  metaValue: OrderByArg
  updatedAt: OrderByArg
  userId: OrderByArg
}

input UserMetaWhereInput {
  AND: [UserMetaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  metaDeleted: BooleanFilter
  metaName: StringFilter
  metaType: StringFilter
  metaValue: StringFilter
  NOT: [UserMetaWhereInput!]
  OR: [UserMetaWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input UserMetaWhereUniqueInput {
  id: String
}

input UserOrderByInput {
  confirmHash: OrderByArg
  createdAt: OrderByArg
  forgotHash: OrderByArg
  id: OrderByArg
  privateHash: OrderByArg
  publicHash: OrderByArg
  updatedAt: OrderByArg
  userConfirmed: OrderByArg
  userDeleted: OrderByArg
  userEmail: OrderByArg
  userPassword: OrderByArg
  userType: OrderByArg
}

input UserWhereInput {
  AND: [UserWhereInput!]
  confirmHash: StringFilter
  createdAt: DateTimeFilter
  followers: UserFilter
  following: UserFilter
  forgotHash: StringFilter
  id: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  privateHash: StringFilter
  publicHash: StringFilter
  updatedAt: DateTimeFilter
  userConfirmed: IntFilter
  userDeleted: BooleanFilter
  userEmail: StringFilter
  userMeta: UserMetaFilter
  userPassword: StringFilter
  userType: IntFilter
}

input UserWhereUniqueInput {
  confirmHash: String
  forgotHash: String
  id: String
  privateHash: String
  publicHash: String
  userEmail: String
}

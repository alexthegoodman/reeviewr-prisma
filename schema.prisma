datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "./__generated__/prisma-client/"
  binaryTargets = ["native", "darwin"]
}

// generator nexus_prisma {
//   provider = "nexus-prisma"
// }

model User {
  id            String     @id @default(cuid())
  userType      Int
  userEmail     String     @unique
  userPassword  String
  publicHash    String     @unique
  privateHash   String     @unique
  confirmHash   String     @unique
  forgotHash    String     @unique
  userConfirmed Int
  userDeleted   Boolean    @default(false)
  userMeta      UserMeta[]

  posts                 Post[]
  pods                  Pod[]          @relation(name: "CreatePodRelation", references: [id])
  memberOf              Pod[]          @relation(name: "JoinPodRelation", references: [id])
  favorites             Favorite[]
  reviews               Review[]
  annotations           Annotation[]
  questions             Question[]
  threads               Thread[]
  notifications         Notification[]
  following             User[]         @relation(name: "FollowRelation", references: [id])
  followers             User[]         @relation(name: "FollowRelation", references: [id])
  sentNotifications     Notification?  @relation(name: "SendingUserRelation", references: [id])
  recievedNotifications Notification?  @relation(name: "ReceivingUserRelation", references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserMeta {
  id          String   @id @default(cuid())
  user        User
  metaType    String
  metaName    String
  metaValue   String
  metaDeleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Pod {
  id             String     @id @default(cuid())
  user           User       @relation(name: "CreatePodRelation", fields: [userId], references: [id])
  userId          String
  members        User[]     @relation(name: "JoinPodRelation", references: [id])
  itemType       String
  itemStatus     String
  itemUrlSegment String
  itemName       String
  itemContent    String
  itemDeleted    Boolean    @default(false)
  itemMeta       PodMeta[]
  posts          Post[]
  categories     Category[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model PodMeta {
  id          String   @id @default(cuid())
  pod         Pod
  metaType    String
  metaName    String
  metaValue   String
  metaDeleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id             String       @id @default(cuid())
  user           User
  pod            Pod
  itemType       String
  itemStatus     String
  itemUrlSegment String
  itemMimeType   String
  itemName       String
  itemContent    String
  itemDeleted    Boolean      @default(false)
  itemMeta       PostMeta[]
  tags           Tag[]
  favorites      Favorite[]
  reviews        Review[]
  annotations    Annotation[]
  questions      Question[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PostMeta {
  id          String   @id @default(cuid())
  post        Post
  metaType    String
  metaName    String
  metaValue   String
  metaDeleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id             String       @id @default(cuid())
  user           User
  itemType       String
  itemStatus     String
  itemUrlSegment String
  itemMimeType   String
  itemName       String
  itemContent    String
  itemDeleted    Boolean      @default(false)
  itemMeta       ReviewMeta[]
  post           Post
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ReviewMeta {
  id          String   @id @default(cuid())
  review      Review
  metaType    String
  metaName    String
  metaValue   String
  metaDeleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Annotation {
  id             String           @id @default(cuid())
  user           User
  itemType       String
  itemStatus     String
  itemUrlSegment String
  itemMimeType   String
  itemName       String
  itemContent    String
  itemDeleted    Boolean          @default(false)
  itemMeta       AnnotationMeta[]
  post           Post
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model AnnotationMeta {
  id          String     @id @default(cuid())
  annotation  Annotation
  metaType    String
  metaName    String
  metaValue   String
  metaDeleted Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id             String         @id @default(cuid())
  user           User
  itemType       String
  itemStatus     String
  itemUrlSegment String
  itemMimeType   String
  itemName       String
  itemContent    String
  itemDeleted    Boolean        @default(false)
  itemMeta       QuestionMeta[]
  post           Post
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model QuestionMeta {
  id          String   @id @default(cuid())
  question    Question
  metaType    String
  metaName    String
  metaValue   String
  metaDeleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Thread {
  id          String       @id @default(cuid())
  itemType    String
  itemStatus  String
  itemName    String
  itemContent String
  itemDeleted Boolean      @default(false)
  itemMeta    ThreadMeta[]

  messages     Message[]
  participants User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThreadMeta {
  id          String   @id @default(cuid())
  thread      Thread
  metaType    String
  metaName    String
  metaValue   String
  metaDeleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id          String        @id @default(cuid())
  user        User
  itemType    String
  itemStatus  String
  itemName    String
  itemContent String
  itemDeleted Boolean       @default(false)
  itemMeta    MessageMeta[]
  thread      Thread
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model MessageMeta {
  id          String   @id @default(cuid())
  message     Message
  metaType    String
  metaName    String
  metaValue   String
  metaDeleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String             @id @default(cuid())
  itemType    String
  itemStatus  String
  itemName    String
  itemContent String
  itemDeleted Boolean            @default(false)
  itemMeta    NotificationMeta[]

  sender   User  @relation(name: "SendingUserRelation", fields: [senderId], references: [id])
  senderId String 
  receiver User  @relation(name: "ReceivingUserRelation", fields: [receiverId], references: [id])
  receiverId String
  pod      Pod?
  post     Post?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NotificationMeta {
  id           String       @id @default(cuid())
  notification Notification
  metaType     String
  metaName     String
  metaValue    String
  metaDeleted  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Favorite {
  id          String   @id @default(cuid())
  user        User
  itemType    String
  itemStatus  String
  itemName    String
  itemContent String
  post        Post
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id          String   @id @default(cuid())
  itemType    String
  itemStatus  String
  itemName    String
  itemContent String
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  itemType    String
  itemStatus  String
  itemName    String
  itemContent String
  pods        Pod[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}